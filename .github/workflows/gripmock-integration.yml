name: GripMock Integration Tests

on:
  workflow_dispatch:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  gripmock-integration:
    name: Test grpctestify against GripMock
    runs-on: ubuntu-latest

    steps:
      - name: Checkout grpctestify
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true

      - name: Install dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
          grpcurl --version

      - name: Install bashly and generate grpctestify
        run: |
          set -euo pipefail
          gem install bashly
          make generate
          mkdir -p $HOME/bin
          cp grpctestify.sh $HOME/bin/grpctestify
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Verify grpctestify installation
        run: |
          set -euo pipefail
          grpctestify --version

      - name: Clone GripMock repository to tmp
        run: |
          set -euo pipefail
          cd /tmp
          git clone https://github.com/bavix/gripmock.git
          cd gripmock

      - name: Find and checkout latest tag
        run: |
          set -euo pipefail
          cd /tmp/gripmock
          latest_tag=$(git describe --tags --abbrev=0)
          echo "Latest tag: $latest_tag"
          git checkout $latest_tag

      - name: Start GripMock server with examples
        run: |
          set -euo pipefail
          cd /tmp/gripmock
          go run main.go examples -s examples &
          echo $! > gripmock.pid
          
          # Wait for server to start and verify it's ready
          go run main.go check
          
          echo "GripMock server started with PID $(cat gripmock.pid)"

      - name: Test grpctestify with GripMock examples
        run: |
          set -euo pipefail
          cd /tmp/gripmock
          mkdir -p test-results
          
          # Run grpctestify tests against examples with JUnit output
          grpctestify examples --log-junit=test-results/gripmock-integration.xml || true
          
          # Also run without JUnit for compatibility check
          grpctestify examples
          
          echo "GripMock integration test completed successfully"

      - name: Download JUnit XSD schema
        if: always()
        run: |
          cd /tmp/gripmock
          curl -o junit.xsd https://raw.githubusercontent.com/junit-team/junit5/main/platform-tests/src/test/resources/jenkins-junit.xsd

      - name: Validate JUnit reports
        if: always()
        run: |
          cd /tmp/gripmock
          if [ -d "test-results" ] && [ "$(ls -A test-results/*.xml 2>/dev/null)" ]; then
            echo "Validating JUnit XML reports for GripMock integration..."
            for report in test-results/*.xml; do
              if [ -f "$report" ]; then
                echo "Validating $report..."
                if xmllint --noout --schema junit.xsd "$report"; then
                  echo "✅ $report is valid"
                else
                  echo "❌ $report is invalid"
                fi
              fi
            done
          else
            echo "No JUnit reports found to validate"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gripmock-integration-results
          path: |
            /tmp/gripmock/test-results/*.xml
          retention-days: 30

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: GripMock Integration Results
          path: /tmp/gripmock/test-results/*.xml
          reporter: java-junit
          fail-on-error: false

      - name: Cleanup gripmock server
        if: always()
        run: |
          cd /tmp/gripmock
          if [ -f gripmock.pid ]; then
            kill $(cat gripmock.pid) 2>/dev/null || true
            rm -f gripmock.pid
          fi