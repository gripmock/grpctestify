name: Examples Matrix Testing

on:
  push:
    branches: [master]
  pull_request:
    branches: [master, v1-dev]
  workflow_dispatch:

jobs:
  # Generate dynamic matrix from examples-config.json
  generate-matrix:
    name: Generate Examples Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate matrix from examples-config.json
        id: set-matrix
        run: |
          echo "Generating matrix from examples configuration..."
          matrix=$(jq -c '[.groups[] | .examples[] | select(.test_count > 0)]' examples/examples-config.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix:"
          echo "$matrix" | jq '.'

  # Test each example in parallel
  test-examples:
    name: Test ${{ matrix.example.name }}
    runs-on: ${{ matrix.os }}
    needs: generate-matrix
    strategy:
      fail-fast: true  # FAIL FAST: Stop immediately on first failure
      matrix:
        os: [ubuntu-latest]
        example: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq libxml2-utils netcat-openbsd curl unzip
          
          # Install latest protoc (Protocol Buffers compiler)
          echo "Installing latest protoc..."
          PROTOC_VERSION=$(curl -s https://api.github.com/repos/protocolbuffers/protobuf/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "Latest protoc version: $PROTOC_VERSION"
          
          # Download and install protoc
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip"
          sudo unzip -o "protoc-${PROTOC_VERSION}-linux-x86_64.zip" -d /usr/local bin/protoc
          sudo unzip -o "protoc-${PROTOC_VERSION}-linux-x86_64.zip" -d /usr/local 'include/*'
          rm "protoc-${PROTOC_VERSION}-linux-x86_64.zip"
          
          # Verify protoc installation
          protoc --version
          
          # Install Go protobuf plugins
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
          
          # Install bashly for script generation
          gem install bashly

      - name: Generate grpctestify
        run: |
          make generate
          
          mkdir -p ~/bin
          cp grpctestify.sh ~/bin/grpctestify
          chmod +x ~/bin/grpctestify
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Validate example structure
        run: |
          example_dir=$(find examples -name "${{ matrix.example.name }}" -type d)
          echo "Validating example: ${{ matrix.example.name }}"
          
          # Check required directories
          test -d "$example_dir" || (echo "Example directory not found: $example_dir" && exit 1)
          test -d "$example_dir/server" || (echo "Server directory not found: $example_dir/server" && exit 1)
          test -d "$example_dir/tests" || (echo "Tests directory not found: $example_dir/tests" && exit 1)
          
          # Check required files
          test -f "$example_dir/server/go.mod" || (echo "go.mod not found in server" && exit 1)
          test -f "$example_dir/server/main.go" || (echo "main.go not found in server" && exit 1)
          test -f "$example_dir/server/Makefile" || (echo "Makefile not found in server" && exit 1)
          
          # Count test files
          test_count=$(find "$example_dir/tests" -name "*.gctf" | wc -l)
          expected_count=${{ matrix.example.test_count }}
          
          if [ "$test_count" -eq "$expected_count" ]; then
            echo "Test count matches: $test_count tests found"
          else
            echo "Error: Test count mismatch: expected $expected_count, found $test_count"
            exit 1
          fi
          
          echo "Example structure validation passed"

      - name: Build gRPC server
        run: |
          set -euo pipefail
          example_dir=$(find examples -name "${{ matrix.example.name }}" -type d)
          echo "Building gRPC server for ${{ matrix.example.name }}"
          
          cd "$example_dir/server"
          make build

      - name: Start gRPC server using centralized script
        run: |
          set -euo pipefail
          example_dir=$(find examples -name "${{ matrix.example.name }}" -type d)
          
          echo "Starting all gRPC servers using centralized script..."
          if [ -f "scripts/start_examples_servers.sh" ]; then
            chmod +x scripts/start_examples_servers.sh
            ./scripts/start_examples_servers.sh
          else
            echo "Warning: scripts/start_examples_servers.sh not found, starting server manually"
            cd "$example_dir/server"
            make start &
            echo $! > server.pid
            # Wait for server to listen on the example port
            for i in $(seq 1 30); do
              if nc -z localhost ${{ matrix.example.port }} 2>/dev/null; then
                break
              fi
              sleep 1
            done
          fi
          
          echo "Servers started successfully"

      - name: Validate server endpoints
        run: |
          echo "Validating server endpoints for ${{ matrix.example.name }}"
          
          # List available services
          echo "Available services:"
          grpcurl -plaintext localhost:${{ matrix.example.port }} list
          
          # Test health check if available
          if grpcurl -plaintext localhost:${{ matrix.example.port }} list | grep -q Health; then
            echo "Testing health check..."
            grpcurl -plaintext localhost:${{ matrix.example.port }} grpc.health.v1.Health/Check
          fi

      - name: Run gRPC tests
        run: |
          set -euo pipefail
          example_dir=$(find examples -name "${{ matrix.example.name }}" -type d)
          echo "Running gRPC tests for ${{ matrix.example.name }}"
          
          cd "$example_dir"
          
          # Set environment variables
          export GRPCTESTIFY_ADDRESS="localhost:${{ matrix.example.port }}"
          export GRPCTESTIFY_TIMEOUT=30
          export GRPCTESTIFY_VERBOSE=true
          
          # Run tests (grpctestify v1.0.0 with smart defaults)
          grpctestify tests/
          
          # Also run individual tests for compatibility
          for test_file in tests/*.gctf; do
            if [ -f "$test_file" ]; then
              echo "Running test: $(basename "$test_file")"
              timeout 120 grpctestify "$test_file"
            fi
          done
          
          echo "All tests completed for ${{ matrix.example.name }}"

      - name: Cleanup servers
        if: always()
        run: |
          set -euo pipefail
          example_dir=$(find examples -name "${{ matrix.example.name }}" -type d || true)
          echo "Stopping all gRPC servers..."
          if [ -f "scripts/stop_examples_servers.sh" ]; then
            chmod +x scripts/stop_examples_servers.sh
            ./scripts/stop_examples_servers.sh
          else
            echo "Warning: scripts/stop_examples_servers.sh not found, stopping server manually"
            if [ -n "$example_dir" ] && [ -f "$example_dir/server/server.pid" ]; then
              pid=$(cat "$example_dir/server/server.pid")
              if kill -0 "$pid" 2>/dev/null; then
                kill "$pid"
              fi
              rm -f "$example_dir/server/server.pid"
            fi
          fi
          
          echo "Server cleanup completed"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.example.name }}
          path: |
            examples/*/${{ matrix.example.name }}/tests/*.gctf
            examples/*/${{ matrix.example.name }}/server/*.log
            logs/servers/*.log
          retention-days: 7
