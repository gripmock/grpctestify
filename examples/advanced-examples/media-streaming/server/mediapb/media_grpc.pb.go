// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: media.proto

package mediapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediaStreamingService_UploadFile_FullMethodName         = "/media.MediaStreamingService/UploadFile"
	MediaStreamingService_DownloadFile_FullMethodName       = "/media.MediaStreamingService/DownloadFile"
	MediaStreamingService_GetFileMetadata_FullMethodName    = "/media.MediaStreamingService/GetFileMetadata"
	MediaStreamingService_UpdateFileMetadata_FullMethodName = "/media.MediaStreamingService/UpdateFileMetadata"
	MediaStreamingService_DeleteFile_FullMethodName         = "/media.MediaStreamingService/DeleteFile"
	MediaStreamingService_ListFiles_FullMethodName          = "/media.MediaStreamingService/ListFiles"
	MediaStreamingService_HealthCheck_FullMethodName        = "/media.MediaStreamingService/HealthCheck"
	MediaStreamingService_StreamFile_FullMethodName         = "/media.MediaStreamingService/StreamFile"
	MediaStreamingService_UploadLargeFile_FullMethodName    = "/media.MediaStreamingService/UploadLargeFile"
	MediaStreamingService_ProcessFile_FullMethodName        = "/media.MediaStreamingService/ProcessFile"
)

// MediaStreamingServiceClient is the client API for MediaStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaStreamingServiceClient interface {
	// Unary RPCs
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error)
	UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*UpdateFileMetadataResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Server Streaming - File streaming and chunked downloads
	StreamFile(ctx context.Context, in *StreamFileRequest, opts ...grpc.CallOption) (MediaStreamingService_StreamFileClient, error)
	// Client Streaming - Large file uploads
	UploadLargeFile(ctx context.Context, opts ...grpc.CallOption) (MediaStreamingService_UploadLargeFileClient, error)
	// Bidirectional Streaming - Real-time file processing
	ProcessFile(ctx context.Context, opts ...grpc.CallOption) (MediaStreamingService_ProcessFileClient, error)
}

type mediaStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaStreamingServiceClient(cc grpc.ClientConnInterface) MediaStreamingServiceClient {
	return &mediaStreamingServiceClient{cc}
}

func (c *mediaStreamingServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, MediaStreamingService_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStreamingServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, MediaStreamingService_DownloadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStreamingServiceClient) GetFileMetadata(ctx context.Context, in *GetFileMetadataRequest, opts ...grpc.CallOption) (*GetFileMetadataResponse, error) {
	out := new(GetFileMetadataResponse)
	err := c.cc.Invoke(ctx, MediaStreamingService_GetFileMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStreamingServiceClient) UpdateFileMetadata(ctx context.Context, in *UpdateFileMetadataRequest, opts ...grpc.CallOption) (*UpdateFileMetadataResponse, error) {
	out := new(UpdateFileMetadataResponse)
	err := c.cc.Invoke(ctx, MediaStreamingService_UpdateFileMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStreamingServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, MediaStreamingService_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStreamingServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, MediaStreamingService_ListFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStreamingServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, MediaStreamingService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaStreamingServiceClient) StreamFile(ctx context.Context, in *StreamFileRequest, opts ...grpc.CallOption) (MediaStreamingService_StreamFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaStreamingService_ServiceDesc.Streams[0], MediaStreamingService_StreamFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStreamingServiceStreamFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaStreamingService_StreamFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type mediaStreamingServiceStreamFileClient struct {
	grpc.ClientStream
}

func (x *mediaStreamingServiceStreamFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaStreamingServiceClient) UploadLargeFile(ctx context.Context, opts ...grpc.CallOption) (MediaStreamingService_UploadLargeFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaStreamingService_ServiceDesc.Streams[1], MediaStreamingService_UploadLargeFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStreamingServiceUploadLargeFileClient{stream}
	return x, nil
}

type MediaStreamingService_UploadLargeFileClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type mediaStreamingServiceUploadLargeFileClient struct {
	grpc.ClientStream
}

func (x *mediaStreamingServiceUploadLargeFileClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaStreamingServiceUploadLargeFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaStreamingServiceClient) ProcessFile(ctx context.Context, opts ...grpc.CallOption) (MediaStreamingService_ProcessFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MediaStreamingService_ServiceDesc.Streams[2], MediaStreamingService_ProcessFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaStreamingServiceProcessFileClient{stream}
	return x, nil
}

type MediaStreamingService_ProcessFileClient interface {
	Send(*ProcessingRequest) error
	Recv() (*ProcessingResponse, error)
	grpc.ClientStream
}

type mediaStreamingServiceProcessFileClient struct {
	grpc.ClientStream
}

func (x *mediaStreamingServiceProcessFileClient) Send(m *ProcessingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaStreamingServiceProcessFileClient) Recv() (*ProcessingResponse, error) {
	m := new(ProcessingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaStreamingServiceServer is the server API for MediaStreamingService service.
// All implementations must embed UnimplementedMediaStreamingServiceServer
// for forward compatibility
type MediaStreamingServiceServer interface {
	// Unary RPCs
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error)
	UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Server Streaming - File streaming and chunked downloads
	StreamFile(*StreamFileRequest, MediaStreamingService_StreamFileServer) error
	// Client Streaming - Large file uploads
	UploadLargeFile(MediaStreamingService_UploadLargeFileServer) error
	// Bidirectional Streaming - Real-time file processing
	ProcessFile(MediaStreamingService_ProcessFileServer) error
	mustEmbedUnimplementedMediaStreamingServiceServer()
}

// UnimplementedMediaStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaStreamingServiceServer struct {
}

func (UnimplementedMediaStreamingServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMediaStreamingServiceServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedMediaStreamingServiceServer) GetFileMetadata(context.Context, *GetFileMetadataRequest) (*GetFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedMediaStreamingServiceServer) UpdateFileMetadata(context.Context, *UpdateFileMetadataRequest) (*UpdateFileMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileMetadata not implemented")
}
func (UnimplementedMediaStreamingServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedMediaStreamingServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedMediaStreamingServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMediaStreamingServiceServer) StreamFile(*StreamFileRequest, MediaStreamingService_StreamFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFile not implemented")
}
func (UnimplementedMediaStreamingServiceServer) UploadLargeFile(MediaStreamingService_UploadLargeFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadLargeFile not implemented")
}
func (UnimplementedMediaStreamingServiceServer) ProcessFile(MediaStreamingService_ProcessFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessFile not implemented")
}
func (UnimplementedMediaStreamingServiceServer) mustEmbedUnimplementedMediaStreamingServiceServer() {}

// UnsafeMediaStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaStreamingServiceServer will
// result in compilation errors.
type UnsafeMediaStreamingServiceServer interface {
	mustEmbedUnimplementedMediaStreamingServiceServer()
}

func RegisterMediaStreamingServiceServer(s grpc.ServiceRegistrar, srv MediaStreamingServiceServer) {
	s.RegisterService(&MediaStreamingService_ServiceDesc, srv)
}

func _MediaStreamingService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStreamingServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStreamingService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStreamingServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStreamingService_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStreamingServiceServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStreamingService_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStreamingServiceServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStreamingService_GetFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStreamingServiceServer).GetFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStreamingService_GetFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStreamingServiceServer).GetFileMetadata(ctx, req.(*GetFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStreamingService_UpdateFileMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStreamingServiceServer).UpdateFileMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStreamingService_UpdateFileMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStreamingServiceServer).UpdateFileMetadata(ctx, req.(*UpdateFileMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStreamingService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStreamingServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStreamingService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStreamingServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStreamingService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStreamingServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStreamingService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStreamingServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStreamingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaStreamingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaStreamingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaStreamingServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaStreamingService_StreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaStreamingServiceServer).StreamFile(m, &mediaStreamingServiceStreamFileServer{stream})
}

type MediaStreamingService_StreamFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type mediaStreamingServiceStreamFileServer struct {
	grpc.ServerStream
}

func (x *mediaStreamingServiceStreamFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _MediaStreamingService_UploadLargeFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaStreamingServiceServer).UploadLargeFile(&mediaStreamingServiceUploadLargeFileServer{stream})
}

type MediaStreamingService_UploadLargeFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type mediaStreamingServiceUploadLargeFileServer struct {
	grpc.ServerStream
}

func (x *mediaStreamingServiceUploadLargeFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaStreamingServiceUploadLargeFileServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MediaStreamingService_ProcessFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaStreamingServiceServer).ProcessFile(&mediaStreamingServiceProcessFileServer{stream})
}

type MediaStreamingService_ProcessFileServer interface {
	Send(*ProcessingResponse) error
	Recv() (*ProcessingRequest, error)
	grpc.ServerStream
}

type mediaStreamingServiceProcessFileServer struct {
	grpc.ServerStream
}

func (x *mediaStreamingServiceProcessFileServer) Send(m *ProcessingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaStreamingServiceProcessFileServer) Recv() (*ProcessingRequest, error) {
	m := new(ProcessingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaStreamingService_ServiceDesc is the grpc.ServiceDesc for MediaStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.MediaStreamingService",
	HandlerType: (*MediaStreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _MediaStreamingService_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _MediaStreamingService_DownloadFile_Handler,
		},
		{
			MethodName: "GetFileMetadata",
			Handler:    _MediaStreamingService_GetFileMetadata_Handler,
		},
		{
			MethodName: "UpdateFileMetadata",
			Handler:    _MediaStreamingService_UpdateFileMetadata_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _MediaStreamingService_DeleteFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _MediaStreamingService_ListFiles_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _MediaStreamingService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFile",
			Handler:       _MediaStreamingService_StreamFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadLargeFile",
			Handler:       _MediaStreamingService_UploadLargeFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessFile",
			Handler:       _MediaStreamingService_ProcessFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "media.proto",
}
