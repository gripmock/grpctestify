// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: media.proto

package mediapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type FileStatus int32

const (
	FileStatus_FILE_STATUS_UNKNOWN    FileStatus = 0
	FileStatus_FILE_STATUS_UPLOADING  FileStatus = 1
	FileStatus_FILE_STATUS_ACTIVE     FileStatus = 2
	FileStatus_FILE_STATUS_PROCESSING FileStatus = 3
	FileStatus_FILE_STATUS_ARCHIVED   FileStatus = 4
	FileStatus_FILE_STATUS_DELETED    FileStatus = 5
	FileStatus_FILE_STATUS_ERROR      FileStatus = 6
)

// Enum value maps for FileStatus.
var (
	FileStatus_name = map[int32]string{
		0: "FILE_STATUS_UNKNOWN",
		1: "FILE_STATUS_UPLOADING",
		2: "FILE_STATUS_ACTIVE",
		3: "FILE_STATUS_PROCESSING",
		4: "FILE_STATUS_ARCHIVED",
		5: "FILE_STATUS_DELETED",
		6: "FILE_STATUS_ERROR",
	}
	FileStatus_value = map[string]int32{
		"FILE_STATUS_UNKNOWN":    0,
		"FILE_STATUS_UPLOADING":  1,
		"FILE_STATUS_ACTIVE":     2,
		"FILE_STATUS_PROCESSING": 3,
		"FILE_STATUS_ARCHIVED":   4,
		"FILE_STATUS_DELETED":    5,
		"FILE_STATUS_ERROR":      6,
	}
)

func (x FileStatus) Enum() *FileStatus {
	p := new(FileStatus)
	*p = x
	return p
}

func (x FileStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_media_proto_enumTypes[0].Descriptor()
}

func (FileStatus) Type() protoreflect.EnumType {
	return &file_media_proto_enumTypes[0]
}

func (x FileStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileStatus.Descriptor instead.
func (FileStatus) EnumDescriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

type ProcessingOperation int32

const (
	ProcessingOperation_PROCESSING_OPERATION_UNKNOWN          ProcessingOperation = 0
	ProcessingOperation_PROCESSING_OPERATION_THUMBNAIL        ProcessingOperation = 1
	ProcessingOperation_PROCESSING_OPERATION_TRANSCODE        ProcessingOperation = 2
	ProcessingOperation_PROCESSING_OPERATION_COMPRESS         ProcessingOperation = 3
	ProcessingOperation_PROCESSING_OPERATION_EXTRACT_METADATA ProcessingOperation = 4
	ProcessingOperation_PROCESSING_OPERATION_VIRUS_SCAN       ProcessingOperation = 5
	ProcessingOperation_PROCESSING_OPERATION_OPTIMIZE         ProcessingOperation = 6
	ProcessingOperation_PROCESSING_OPERATION_CONVERT_FORMAT   ProcessingOperation = 7
)

// Enum value maps for ProcessingOperation.
var (
	ProcessingOperation_name = map[int32]string{
		0: "PROCESSING_OPERATION_UNKNOWN",
		1: "PROCESSING_OPERATION_THUMBNAIL",
		2: "PROCESSING_OPERATION_TRANSCODE",
		3: "PROCESSING_OPERATION_COMPRESS",
		4: "PROCESSING_OPERATION_EXTRACT_METADATA",
		5: "PROCESSING_OPERATION_VIRUS_SCAN",
		6: "PROCESSING_OPERATION_OPTIMIZE",
		7: "PROCESSING_OPERATION_CONVERT_FORMAT",
	}
	ProcessingOperation_value = map[string]int32{
		"PROCESSING_OPERATION_UNKNOWN":          0,
		"PROCESSING_OPERATION_THUMBNAIL":        1,
		"PROCESSING_OPERATION_TRANSCODE":        2,
		"PROCESSING_OPERATION_COMPRESS":         3,
		"PROCESSING_OPERATION_EXTRACT_METADATA": 4,
		"PROCESSING_OPERATION_VIRUS_SCAN":       5,
		"PROCESSING_OPERATION_OPTIMIZE":         6,
		"PROCESSING_OPERATION_CONVERT_FORMAT":   7,
	}
)

func (x ProcessingOperation) Enum() *ProcessingOperation {
	p := new(ProcessingOperation)
	*p = x
	return p
}

func (x ProcessingOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessingOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_media_proto_enumTypes[1].Descriptor()
}

func (ProcessingOperation) Type() protoreflect.EnumType {
	return &file_media_proto_enumTypes[1]
}

func (x ProcessingOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessingOperation.Descriptor instead.
func (ProcessingOperation) EnumDescriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

// File upload
type UploadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ContentType   string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	FileSize      int64                  `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserId        string                 `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Category      string                 `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
	IsPublic      bool                   `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	mi := &file_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{0}
}

func (x *UploadFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadFileRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadFileRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *UploadFileRequest) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *UploadFileRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UploadFileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UploadFileRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UploadFileRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type UploadFileResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Success          bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FileId           string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Message          string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Metadata         *FileMetadata          `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProcessingStatus *ProcessingStatus      `protobuf:"bytes,5,opt,name=processing_status,json=processingStatus,proto3" json:"processing_status,omitempty"`
	UploadedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UploadFileResponse) Reset() {
	*x = UploadFileResponse{}
	mi := &file_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResponse) ProtoMessage() {}

func (x *UploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResponse.ProtoReflect.Descriptor instead.
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{1}
}

func (x *UploadFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadFileResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *UploadFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UploadFileResponse) GetMetadata() *FileMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UploadFileResponse) GetProcessingStatus() *ProcessingStatus {
	if x != nil {
		return x.ProcessingStatus
	}
	return nil
}

func (x *UploadFileResponse) GetUploadedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadedAt
	}
	return nil
}

// File download
type DownloadFileRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FileId          string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IncludeMetadata bool                   `protobuf:"varint,3,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
	ChunkSize       int32                  `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DownloadFileRequest) Reset() {
	*x = DownloadFileRequest{}
	mi := &file_media_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRequest) ProtoMessage() {}

func (x *DownloadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadFileRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{2}
}

func (x *DownloadFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *DownloadFileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DownloadFileRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

func (x *DownloadFileRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type DownloadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FileId        string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Metadata      *FileMetadata          `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ContentType   string                 `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	FileSize      int64                  `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Message       string                 `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileResponse) Reset() {
	*x = DownloadFileResponse{}
	mi := &file_media_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileResponse) ProtoMessage() {}

func (x *DownloadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadFileResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{3}
}

func (x *DownloadFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DownloadFileResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *DownloadFileResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DownloadFileResponse) GetMetadata() *FileMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DownloadFileResponse) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *DownloadFileResponse) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *DownloadFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// File metadata
type GetFileMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileMetadataRequest) Reset() {
	*x = GetFileMetadataRequest{}
	mi := &file_media_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileMetadataRequest) ProtoMessage() {}

func (x *GetFileMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetFileMetadataRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{4}
}

func (x *GetFileMetadataRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetFileMetadataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetFileMetadataResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Found            bool                   `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Metadata         *FileMetadata          `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ProcessingStatus *ProcessingStatus      `protobuf:"bytes,3,opt,name=processing_status,json=processingStatus,proto3" json:"processing_status,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetFileMetadataResponse) Reset() {
	*x = GetFileMetadataResponse{}
	mi := &file_media_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileMetadataResponse) ProtoMessage() {}

func (x *GetFileMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetFileMetadataResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{5}
}

func (x *GetFileMetadataResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *GetFileMetadataResponse) GetMetadata() *FileMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetFileMetadataResponse) GetProcessingStatus() *ProcessingStatus {
	if x != nil {
		return x.ProcessingStatus
	}
	return nil
}

type UpdateFileMetadataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Category      string                 `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	IsPublic      bool                   `protobuf:"varint,5,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFileMetadataRequest) Reset() {
	*x = UpdateFileMetadataRequest{}
	mi := &file_media_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFileMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileMetadataRequest) ProtoMessage() {}

func (x *UpdateFileMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateFileMetadataRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFileMetadataRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *UpdateFileMetadataRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateFileMetadataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateFileMetadataRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *UpdateFileMetadataRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type UpdateFileMetadataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Metadata      *FileMetadata          `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFileMetadataResponse) Reset() {
	*x = UpdateFileMetadataResponse{}
	mi := &file_media_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFileMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFileMetadataResponse) ProtoMessage() {}

func (x *UpdateFileMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFileMetadataResponse.ProtoReflect.Descriptor instead.
func (*UpdateFileMetadataResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFileMetadataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateFileMetadataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateFileMetadataResponse) GetMetadata() *FileMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// File deletion
type DeleteFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Permanent     bool                   `protobuf:"varint,3,opt,name=permanent,proto3" json:"permanent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	mi := &file_media_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *DeleteFileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteFileRequest) GetPermanent() bool {
	if x != nil {
		return x.Permanent
	}
	return false
}

type DeleteFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FileId        string                 `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	mi := &file_media_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteFileResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// File listing
type ListFilesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Category      string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	SortBy        string                 `protobuf:"bytes,5,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder     string                 `protobuf:"bytes,6,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	IncludePublic bool                   `protobuf:"varint,7,opt,name=include_public,json=includePublic,proto3" json:"include_public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	mi := &file_media_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{10}
}

func (x *ListFilesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListFilesRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ListFilesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFilesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListFilesRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListFilesRequest) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *ListFilesRequest) GetIncludePublic() bool {
	if x != nil {
		return x.IncludePublic
	}
	return false
}

type ListFilesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*FileMetadata        `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	mi := &file_media_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{11}
}

func (x *ListFilesResponse) GetFiles() []*FileMetadata {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListFilesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListFilesResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ListFilesResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFilesResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Health check
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_media_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{12}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type HealthCheckResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Status         string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version        string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata       map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StorageMetrics *StorageMetrics        `protobuf:"bytes,5,opt,name=storage_metrics,json=storageMetrics,proto3" json:"storage_metrics,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_media_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{13}
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthCheckResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HealthCheckResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HealthCheckResponse) GetStorageMetrics() *StorageMetrics {
	if x != nil {
		return x.StorageMetrics
	}
	return nil
}

// Server streaming - File streaming
type StreamFileRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FileId          string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChunkSize       int32                  `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	IncludeMetadata bool                   `protobuf:"varint,4,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
	StartOffset     int64                  `protobuf:"varint,5,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset       int64                  `protobuf:"varint,6,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamFileRequest) Reset() {
	*x = StreamFileRequest{}
	mi := &file_media_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFileRequest) ProtoMessage() {}

func (x *StreamFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFileRequest.ProtoReflect.Descriptor instead.
func (*StreamFileRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{14}
}

func (x *StreamFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *StreamFileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StreamFileRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *StreamFileRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

func (x *StreamFileRequest) GetStartOffset() int64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *StreamFileRequest) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

type FileChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ChunkNumber   int32                  `protobuf:"varint,2,opt,name=chunk_number,json=chunkNumber,proto3" json:"chunk_number,omitempty"`
	TotalChunks   int32                  `protobuf:"varint,3,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Offset        int64                  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	ChunkSize     int32                  `protobuf:"varint,6,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	IsLastChunk   bool                   `protobuf:"varint,7,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"`
	Metadata      *FileMetadata          `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ChunkMetadata map[string]string      `protobuf:"bytes,10,rep,name=chunk_metadata,json=chunkMetadata,proto3" json:"chunk_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_media_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{15}
}

func (x *FileChunk) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *FileChunk) GetChunkNumber() int32 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *FileChunk) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileChunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileChunk) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *FileChunk) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *FileChunk) GetMetadata() *FileMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FileChunk) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FileChunk) GetChunkMetadata() map[string]string {
	if x != nil {
		return x.ChunkMetadata
	}
	return nil
}

// Client streaming - Large file upload
type UploadLargeFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	ContentType   string                 `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	TotalSize     int64                  `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserId        string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadLargeFileRequest) Reset() {
	*x = UploadLargeFileRequest{}
	mi := &file_media_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadLargeFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLargeFileRequest) ProtoMessage() {}

func (x *UploadLargeFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLargeFileRequest.ProtoReflect.Descriptor instead.
func (*UploadLargeFileRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{16}
}

func (x *UploadLargeFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadLargeFileRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *UploadLargeFileRequest) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *UploadLargeFileRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UploadLargeFileRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Bidirectional streaming - File processing
type ProcessingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FileId        string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Operation     ProcessingOperation    `protobuf:"varint,4,opt,name=operation,proto3,enum=media.ProcessingOperation" json:"operation,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessingRequest) Reset() {
	*x = ProcessingRequest{}
	mi := &file_media_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingRequest) ProtoMessage() {}

func (x *ProcessingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingRequest.ProtoReflect.Descriptor instead.
func (*ProcessingRequest) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{17}
}

func (x *ProcessingRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ProcessingRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ProcessingRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ProcessingRequest) GetOperation() ProcessingOperation {
	if x != nil {
		return x.Operation
	}
	return ProcessingOperation_PROCESSING_OPERATION_UNKNOWN
}

func (x *ProcessingRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ProcessingRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ProcessingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FileId        string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Operation     ProcessingOperation    `protobuf:"varint,3,opt,name=operation,proto3,enum=media.ProcessingOperation" json:"operation,omitempty"`
	Status        *ProcessingStatus      `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Progress      float64                `protobuf:"fixed64,5,opt,name=progress,proto3" json:"progress,omitempty"`
	Message       string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Result        *ProcessingResult      `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessingResponse) Reset() {
	*x = ProcessingResponse{}
	mi := &file_media_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingResponse) ProtoMessage() {}

func (x *ProcessingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingResponse.ProtoReflect.Descriptor instead.
func (*ProcessingResponse) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{18}
}

func (x *ProcessingResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ProcessingResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ProcessingResponse) GetOperation() ProcessingOperation {
	if x != nil {
		return x.Operation
	}
	return ProcessingOperation_PROCESSING_OPERATION_UNKNOWN
}

func (x *ProcessingResponse) GetStatus() *ProcessingStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ProcessingResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ProcessingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessingResponse) GetResult() *ProcessingResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ProcessingResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ProcessingResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Data structures
type FileMetadata struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Filename         string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	ContentType      string                 `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	FileSize         int64                  `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	UserId           string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Category         string                 `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty"`
	IsPublic         bool                   `protobuf:"varint,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	Status           FileStatus             `protobuf:"varint,8,opt,name=status,proto3,enum=media.FileStatus" json:"status,omitempty"`
	ProcessingStatus *ProcessingStatus      `protobuf:"bytes,9,opt,name=processing_status,json=processingStatus,proto3" json:"processing_status,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastAccessed     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_accessed,json=lastAccessed,proto3" json:"last_accessed,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,13,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tags             []string               `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	Checksum         string                 `protobuf:"bytes,15,opt,name=checksum,proto3" json:"checksum,omitempty"`
	StoragePath      string                 `protobuf:"bytes,16,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	DownloadCount    int32                  `protobuf:"varint,17,opt,name=download_count,json=downloadCount,proto3" json:"download_count,omitempty"`
	AverageRating    float64                `protobuf:"fixed64,18,opt,name=average_rating,json=averageRating,proto3" json:"average_rating,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_media_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{19}
}

func (x *FileMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileMetadata) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FileMetadata) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileMetadata) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FileMetadata) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *FileMetadata) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *FileMetadata) GetStatus() FileStatus {
	if x != nil {
		return x.Status
	}
	return FileStatus_FILE_STATUS_UNKNOWN
}

func (x *FileMetadata) GetProcessingStatus() *ProcessingStatus {
	if x != nil {
		return x.ProcessingStatus
	}
	return nil
}

func (x *FileMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FileMetadata) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FileMetadata) GetLastAccessed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessed
	}
	return nil
}

func (x *FileMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FileMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FileMetadata) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *FileMetadata) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *FileMetadata) GetDownloadCount() int32 {
	if x != nil {
		return x.DownloadCount
	}
	return 0
}

func (x *FileMetadata) GetAverageRating() float64 {
	if x != nil {
		return x.AverageRating
	}
	return 0
}

type ProcessingStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"` // "pending", "processing", "completed", "failed"
	Progress      float64                `protobuf:"fixed64,2,opt,name=progress,proto3" json:"progress,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Steps         []*ProcessingStep      `protobuf:"bytes,4,rep,name=steps,proto3" json:"steps,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessingStatus) Reset() {
	*x = ProcessingStatus{}
	mi := &file_media_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingStatus) ProtoMessage() {}

func (x *ProcessingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingStatus.ProtoReflect.Descriptor instead.
func (*ProcessingStatus) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{20}
}

func (x *ProcessingStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProcessingStatus) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ProcessingStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessingStatus) GetSteps() []*ProcessingStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ProcessingStatus) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ProcessingStatus) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ProcessingStatus) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ProcessingStep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Progress      float64                `protobuf:"fixed64,3,opt,name=progress,proto3" json:"progress,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessingStep) Reset() {
	*x = ProcessingStep{}
	mi := &file_media_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingStep) ProtoMessage() {}

func (x *ProcessingStep) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingStep.ProtoReflect.Descriptor instead.
func (*ProcessingStep) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{21}
}

func (x *ProcessingStep) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessingStep) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProcessingStep) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *ProcessingStep) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessingStep) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ProcessingStep) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type ProcessingResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ResultType     string                 `protobuf:"bytes,1,opt,name=result_type,json=resultType,proto3" json:"result_type,omitempty"`
	ResultData     string                 `protobuf:"bytes,2,opt,name=result_data,json=resultData,proto3" json:"result_data,omitempty"`
	Metadata       map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GeneratedFiles []string               `protobuf:"bytes,4,rep,name=generated_files,json=generatedFiles,proto3" json:"generated_files,omitempty"`
	ErrorMessage   string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProcessingResult) Reset() {
	*x = ProcessingResult{}
	mi := &file_media_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingResult) ProtoMessage() {}

func (x *ProcessingResult) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingResult.ProtoReflect.Descriptor instead.
func (*ProcessingResult) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{22}
}

func (x *ProcessingResult) GetResultType() string {
	if x != nil {
		return x.ResultType
	}
	return ""
}

func (x *ProcessingResult) GetResultData() string {
	if x != nil {
		return x.ResultData
	}
	return ""
}

func (x *ProcessingResult) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProcessingResult) GetGeneratedFiles() []string {
	if x != nil {
		return x.GeneratedFiles
	}
	return nil
}

func (x *ProcessingResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type StorageMetrics struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	TotalStorageBytes         int64                  `protobuf:"varint,1,opt,name=total_storage_bytes,json=totalStorageBytes,proto3" json:"total_storage_bytes,omitempty"`
	UsedStorageBytes          int64                  `protobuf:"varint,2,opt,name=used_storage_bytes,json=usedStorageBytes,proto3" json:"used_storage_bytes,omitempty"`
	AvailableStorageBytes     int64                  `protobuf:"varint,3,opt,name=available_storage_bytes,json=availableStorageBytes,proto3" json:"available_storage_bytes,omitempty"`
	TotalFiles                int32                  `protobuf:"varint,4,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	ActiveFiles               int32                  `protobuf:"varint,5,opt,name=active_files,json=activeFiles,proto3" json:"active_files,omitempty"`
	StorageUtilizationPercent float64                `protobuf:"fixed64,6,opt,name=storage_utilization_percent,json=storageUtilizationPercent,proto3" json:"storage_utilization_percent,omitempty"`
	StorageByCategory         map[string]int64       `protobuf:"bytes,7,rep,name=storage_by_category,json=storageByCategory,proto3" json:"storage_by_category,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FilesByCategory           map[string]int32       `protobuf:"bytes,8,rep,name=files_by_category,json=filesByCategory,proto3" json:"files_by_category,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *StorageMetrics) Reset() {
	*x = StorageMetrics{}
	mi := &file_media_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageMetrics) ProtoMessage() {}

func (x *StorageMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_media_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageMetrics.ProtoReflect.Descriptor instead.
func (*StorageMetrics) Descriptor() ([]byte, []int) {
	return file_media_proto_rawDescGZIP(), []int{23}
}

func (x *StorageMetrics) GetTotalStorageBytes() int64 {
	if x != nil {
		return x.TotalStorageBytes
	}
	return 0
}

func (x *StorageMetrics) GetUsedStorageBytes() int64 {
	if x != nil {
		return x.UsedStorageBytes
	}
	return 0
}

func (x *StorageMetrics) GetAvailableStorageBytes() int64 {
	if x != nil {
		return x.AvailableStorageBytes
	}
	return 0
}

func (x *StorageMetrics) GetTotalFiles() int32 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *StorageMetrics) GetActiveFiles() int32 {
	if x != nil {
		return x.ActiveFiles
	}
	return 0
}

func (x *StorageMetrics) GetStorageUtilizationPercent() float64 {
	if x != nil {
		return x.StorageUtilizationPercent
	}
	return 0
}

func (x *StorageMetrics) GetStorageByCategory() map[string]int64 {
	if x != nil {
		return x.StorageByCategory
	}
	return nil
}

func (x *StorageMetrics) GetFilesByCategory() map[string]int32 {
	if x != nil {
		return x.FilesByCategory
	}
	return nil
}

var File_media_proto protoreflect.FileDescriptor

const file_media_proto_rawDesc = "" +
	"\n" +
	"\vmedia.proto\x12\x05media\x1a\x1fgoogle/protobuf/timestamp.proto\"\xd6\x02\n" +
	"\x11UploadFileRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x12!\n" +
	"\fcontent_type\x18\x03 \x01(\tR\vcontentType\x12\x1b\n" +
	"\tfile_size\x18\x04 \x01(\x03R\bfileSize\x12B\n" +
	"\bmetadata\x18\x05 \x03(\v2&.media.UploadFileRequest.MetadataEntryR\bmetadata\x12\x17\n" +
	"\auser_id\x18\x06 \x01(\tR\x06userId\x12\x1a\n" +
	"\bcategory\x18\a \x01(\tR\bcategory\x12\x1b\n" +
	"\tis_public\x18\b \x01(\bR\bisPublic\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x95\x02\n" +
	"\x12UploadFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12/\n" +
	"\bmetadata\x18\x04 \x01(\v2\x13.media.FileMetadataR\bmetadata\x12D\n" +
	"\x11processing_status\x18\x05 \x01(\v2\x17.media.ProcessingStatusR\x10processingStatus\x12;\n" +
	"\vuploaded_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"uploadedAt\"\x91\x01\n" +
	"\x13DownloadFileRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12)\n" +
	"\x10include_metadata\x18\x03 \x01(\bR\x0fincludeMetadata\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x04 \x01(\x05R\tchunkSize\"\xe8\x01\n" +
	"\x14DownloadFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12/\n" +
	"\bmetadata\x18\x04 \x01(\v2\x13.media.FileMetadataR\bmetadata\x12!\n" +
	"\fcontent_type\x18\x05 \x01(\tR\vcontentType\x12\x1b\n" +
	"\tfile_size\x18\x06 \x01(\x03R\bfileSize\x12\x18\n" +
	"\amessage\x18\a \x01(\tR\amessage\"J\n" +
	"\x16GetFileMetadataRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"\xa6\x01\n" +
	"\x17GetFileMetadataResponse\x12\x14\n" +
	"\x05found\x18\x01 \x01(\bR\x05found\x12/\n" +
	"\bmetadata\x18\x02 \x01(\v2\x13.media.FileMetadataR\bmetadata\x12D\n" +
	"\x11processing_status\x18\x03 \x01(\v2\x17.media.ProcessingStatusR\x10processingStatus\"\x8f\x02\n" +
	"\x19UpdateFileMetadataRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12J\n" +
	"\bmetadata\x18\x03 \x03(\v2..media.UpdateFileMetadataRequest.MetadataEntryR\bmetadata\x12\x1a\n" +
	"\bcategory\x18\x04 \x01(\tR\bcategory\x12\x1b\n" +
	"\tis_public\x18\x05 \x01(\bR\bisPublic\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x81\x01\n" +
	"\x1aUpdateFileMetadataResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12/\n" +
	"\bmetadata\x18\x03 \x01(\v2\x13.media.FileMetadataR\bmetadata\"c\n" +
	"\x11DeleteFileRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1c\n" +
	"\tpermanent\x18\x03 \x01(\bR\tpermanent\"a\n" +
	"\x12DeleteFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x17\n" +
	"\afile_id\x18\x03 \x01(\tR\x06fileId\"\xd4\x01\n" +
	"\x10ListFilesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bcategory\x18\x02 \x01(\tR\bcategory\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x05R\x06offset\x12\x17\n" +
	"\asort_by\x18\x05 \x01(\tR\x06sortBy\x12\x1d\n" +
	"\n" +
	"sort_order\x18\x06 \x01(\tR\tsortOrder\x12%\n" +
	"\x0einclude_public\x18\a \x01(\bR\rincludePublic\"\xa8\x01\n" +
	"\x11ListFilesResponse\x12)\n" +
	"\x05files\x18\x01 \x03(\v2\x13.media.FileMetadataR\x05files\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x05 \x01(\x05R\x06offset\".\n" +
	"\x12HealthCheckRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\"\xc4\x02\n" +
	"\x13HealthCheckResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12D\n" +
	"\bmetadata\x18\x04 \x03(\v2(.media.HealthCheckResponse.MetadataEntryR\bmetadata\x12>\n" +
	"\x0fstorage_metrics\x18\x05 \x01(\v2\x15.media.StorageMetricsR\x0estorageMetrics\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd1\x01\n" +
	"\x11StreamFileRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x03 \x01(\x05R\tchunkSize\x12)\n" +
	"\x10include_metadata\x18\x04 \x01(\bR\x0fincludeMetadata\x12!\n" +
	"\fstart_offset\x18\x05 \x01(\x03R\vstartOffset\x12\x1d\n" +
	"\n" +
	"end_offset\x18\x06 \x01(\x03R\tendOffset\"\xd2\x03\n" +
	"\tFileChunk\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\tR\x06fileId\x12!\n" +
	"\fchunk_number\x18\x02 \x01(\x05R\vchunkNumber\x12!\n" +
	"\ftotal_chunks\x18\x03 \x01(\x05R\vtotalChunks\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x16\n" +
	"\x06offset\x18\x05 \x01(\x03R\x06offset\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x06 \x01(\x05R\tchunkSize\x12\"\n" +
	"\ris_last_chunk\x18\a \x01(\bR\visLastChunk\x12/\n" +
	"\bmetadata\x18\b \x01(\v2\x13.media.FileMetadataR\bmetadata\x128\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12J\n" +
	"\x0echunk_metadata\x18\n" +
	" \x03(\v2#.media.FileChunk.ChunkMetadataEntryR\rchunkMetadata\x1a@\n" +
	"\x12ChunkMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x95\x02\n" +
	"\x16UploadLargeFileRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12!\n" +
	"\fcontent_type\x18\x02 \x01(\tR\vcontentType\x12\x1d\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x03R\ttotalSize\x12G\n" +
	"\bmetadata\x18\x04 \x03(\v2+.media.UploadLargeFileRequest.MetadataEntryR\bmetadata\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe1\x02\n" +
	"\x11ProcessingRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x128\n" +
	"\toperation\x18\x04 \x01(\x0e2\x1a.media.ProcessingOperationR\toperation\x12H\n" +
	"\n" +
	"parameters\x18\x05 \x03(\v2(.media.ProcessingRequest.ParametersEntryR\n" +
	"parameters\x128\n" +
	"\ttimestamp\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x1a=\n" +
	"\x0fParametersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xda\x03\n" +
	"\x12ProcessingResponse\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\x128\n" +
	"\toperation\x18\x03 \x01(\x0e2\x1a.media.ProcessingOperationR\toperation\x12/\n" +
	"\x06status\x18\x04 \x01(\v2\x17.media.ProcessingStatusR\x06status\x12\x1a\n" +
	"\bprogress\x18\x05 \x01(\x01R\bprogress\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\x12/\n" +
	"\x06result\x18\a \x01(\v2\x17.media.ProcessingResultR\x06result\x128\n" +
	"\ttimestamp\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12C\n" +
	"\bmetadata\x18\t \x03(\v2'.media.ProcessingResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x91\x06\n" +
	"\fFileMetadata\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12!\n" +
	"\fcontent_type\x18\x03 \x01(\tR\vcontentType\x12\x1b\n" +
	"\tfile_size\x18\x04 \x01(\x03R\bfileSize\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\tR\x06userId\x12\x1a\n" +
	"\bcategory\x18\x06 \x01(\tR\bcategory\x12\x1b\n" +
	"\tis_public\x18\a \x01(\bR\bisPublic\x12)\n" +
	"\x06status\x18\b \x01(\x0e2\x11.media.FileStatusR\x06status\x12D\n" +
	"\x11processing_status\x18\t \x01(\v2\x17.media.ProcessingStatusR\x10processingStatus\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12?\n" +
	"\rlast_accessed\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\flastAccessed\x12=\n" +
	"\bmetadata\x18\r \x03(\v2!.media.FileMetadata.MetadataEntryR\bmetadata\x12\x12\n" +
	"\x04tags\x18\x0e \x03(\tR\x04tags\x12\x1a\n" +
	"\bchecksum\x18\x0f \x01(\tR\bchecksum\x12!\n" +
	"\fstorage_path\x18\x10 \x01(\tR\vstoragePath\x12%\n" +
	"\x0edownload_count\x18\x11 \x01(\x05R\rdownloadCount\x12%\n" +
	"\x0eaverage_rating\x18\x12 \x01(\x01R\raverageRating\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x87\x03\n" +
	"\x10ProcessingStatus\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x1a\n" +
	"\bprogress\x18\x02 \x01(\x01R\bprogress\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12+\n" +
	"\x05steps\x18\x04 \x03(\v2\x15.media.ProcessingStepR\x05steps\x129\n" +
	"\n" +
	"started_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12=\n" +
	"\fcompleted_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\x12A\n" +
	"\bmetadata\x18\a \x03(\v2%.media.ProcessingStatus.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xec\x01\n" +
	"\x0eProcessingStep\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x1a\n" +
	"\bprogress\x18\x03 \x01(\x01R\bprogress\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x129\n" +
	"\n" +
	"started_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12=\n" +
	"\fcompleted_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\"\xa2\x02\n" +
	"\x10ProcessingResult\x12\x1f\n" +
	"\vresult_type\x18\x01 \x01(\tR\n" +
	"resultType\x12\x1f\n" +
	"\vresult_data\x18\x02 \x01(\tR\n" +
	"resultData\x12A\n" +
	"\bmetadata\x18\x03 \x03(\v2%.media.ProcessingResult.MetadataEntryR\bmetadata\x12'\n" +
	"\x0fgenerated_files\x18\x04 \x03(\tR\x0egeneratedFiles\x12#\n" +
	"\rerror_message\x18\x05 \x01(\tR\ferrorMessage\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xea\x04\n" +
	"\x0eStorageMetrics\x12.\n" +
	"\x13total_storage_bytes\x18\x01 \x01(\x03R\x11totalStorageBytes\x12,\n" +
	"\x12used_storage_bytes\x18\x02 \x01(\x03R\x10usedStorageBytes\x126\n" +
	"\x17available_storage_bytes\x18\x03 \x01(\x03R\x15availableStorageBytes\x12\x1f\n" +
	"\vtotal_files\x18\x04 \x01(\x05R\n" +
	"totalFiles\x12!\n" +
	"\factive_files\x18\x05 \x01(\x05R\vactiveFiles\x12>\n" +
	"\x1bstorage_utilization_percent\x18\x06 \x01(\x01R\x19storageUtilizationPercent\x12\\\n" +
	"\x13storage_by_category\x18\a \x03(\v2,.media.StorageMetrics.StorageByCategoryEntryR\x11storageByCategory\x12V\n" +
	"\x11files_by_category\x18\b \x03(\v2*.media.StorageMetrics.FilesByCategoryEntryR\x0ffilesByCategory\x1aD\n" +
	"\x16StorageByCategoryEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aB\n" +
	"\x14FilesByCategoryEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01*\xbe\x01\n" +
	"\n" +
	"FileStatus\x12\x17\n" +
	"\x13FILE_STATUS_UNKNOWN\x10\x00\x12\x19\n" +
	"\x15FILE_STATUS_UPLOADING\x10\x01\x12\x16\n" +
	"\x12FILE_STATUS_ACTIVE\x10\x02\x12\x1a\n" +
	"\x16FILE_STATUS_PROCESSING\x10\x03\x12\x18\n" +
	"\x14FILE_STATUS_ARCHIVED\x10\x04\x12\x17\n" +
	"\x13FILE_STATUS_DELETED\x10\x05\x12\x15\n" +
	"\x11FILE_STATUS_ERROR\x10\x06*\xbe\x02\n" +
	"\x13ProcessingOperation\x12 \n" +
	"\x1cPROCESSING_OPERATION_UNKNOWN\x10\x00\x12\"\n" +
	"\x1ePROCESSING_OPERATION_THUMBNAIL\x10\x01\x12\"\n" +
	"\x1ePROCESSING_OPERATION_TRANSCODE\x10\x02\x12!\n" +
	"\x1dPROCESSING_OPERATION_COMPRESS\x10\x03\x12)\n" +
	"%PROCESSING_OPERATION_EXTRACT_METADATA\x10\x04\x12#\n" +
	"\x1fPROCESSING_OPERATION_VIRUS_SCAN\x10\x05\x12!\n" +
	"\x1dPROCESSING_OPERATION_OPTIMIZE\x10\x06\x12'\n" +
	"#PROCESSING_OPERATION_CONVERT_FORMAT\x10\a2\xdf\x05\n" +
	"\x15MediaStreamingService\x12A\n" +
	"\n" +
	"UploadFile\x12\x18.media.UploadFileRequest\x1a\x19.media.UploadFileResponse\x12G\n" +
	"\fDownloadFile\x12\x1a.media.DownloadFileRequest\x1a\x1b.media.DownloadFileResponse\x12P\n" +
	"\x0fGetFileMetadata\x12\x1d.media.GetFileMetadataRequest\x1a\x1e.media.GetFileMetadataResponse\x12Y\n" +
	"\x12UpdateFileMetadata\x12 .media.UpdateFileMetadataRequest\x1a!.media.UpdateFileMetadataResponse\x12A\n" +
	"\n" +
	"DeleteFile\x12\x18.media.DeleteFileRequest\x1a\x19.media.DeleteFileResponse\x12>\n" +
	"\tListFiles\x12\x17.media.ListFilesRequest\x1a\x18.media.ListFilesResponse\x12D\n" +
	"\vHealthCheck\x12\x19.media.HealthCheckRequest\x1a\x1a.media.HealthCheckResponse\x12:\n" +
	"\n" +
	"StreamFile\x12\x18.media.StreamFileRequest\x1a\x10.media.FileChunk0\x01\x12@\n" +
	"\x0fUploadLargeFile\x12\x10.media.FileChunk\x1a\x19.media.UploadFileResponse(\x01\x12F\n" +
	"\vProcessFile\x12\x18.media.ProcessingRequest\x1a\x19.media.ProcessingResponse(\x010\x01BIZGgithub.com/gripmock/grpctestify/examples/media-streaming/server/mediapbb\x06proto3"

var (
	file_media_proto_rawDescOnce sync.Once
	file_media_proto_rawDescData []byte
)

func file_media_proto_rawDescGZIP() []byte {
	file_media_proto_rawDescOnce.Do(func() {
		file_media_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_media_proto_rawDesc), len(file_media_proto_rawDesc)))
	})
	return file_media_proto_rawDescData
}

var file_media_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_media_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_media_proto_goTypes = []any{
	(FileStatus)(0),                    // 0: media.FileStatus
	(ProcessingOperation)(0),           // 1: media.ProcessingOperation
	(*UploadFileRequest)(nil),          // 2: media.UploadFileRequest
	(*UploadFileResponse)(nil),         // 3: media.UploadFileResponse
	(*DownloadFileRequest)(nil),        // 4: media.DownloadFileRequest
	(*DownloadFileResponse)(nil),       // 5: media.DownloadFileResponse
	(*GetFileMetadataRequest)(nil),     // 6: media.GetFileMetadataRequest
	(*GetFileMetadataResponse)(nil),    // 7: media.GetFileMetadataResponse
	(*UpdateFileMetadataRequest)(nil),  // 8: media.UpdateFileMetadataRequest
	(*UpdateFileMetadataResponse)(nil), // 9: media.UpdateFileMetadataResponse
	(*DeleteFileRequest)(nil),          // 10: media.DeleteFileRequest
	(*DeleteFileResponse)(nil),         // 11: media.DeleteFileResponse
	(*ListFilesRequest)(nil),           // 12: media.ListFilesRequest
	(*ListFilesResponse)(nil),          // 13: media.ListFilesResponse
	(*HealthCheckRequest)(nil),         // 14: media.HealthCheckRequest
	(*HealthCheckResponse)(nil),        // 15: media.HealthCheckResponse
	(*StreamFileRequest)(nil),          // 16: media.StreamFileRequest
	(*FileChunk)(nil),                  // 17: media.FileChunk
	(*UploadLargeFileRequest)(nil),     // 18: media.UploadLargeFileRequest
	(*ProcessingRequest)(nil),          // 19: media.ProcessingRequest
	(*ProcessingResponse)(nil),         // 20: media.ProcessingResponse
	(*FileMetadata)(nil),               // 21: media.FileMetadata
	(*ProcessingStatus)(nil),           // 22: media.ProcessingStatus
	(*ProcessingStep)(nil),             // 23: media.ProcessingStep
	(*ProcessingResult)(nil),           // 24: media.ProcessingResult
	(*StorageMetrics)(nil),             // 25: media.StorageMetrics
	nil,                                // 26: media.UploadFileRequest.MetadataEntry
	nil,                                // 27: media.UpdateFileMetadataRequest.MetadataEntry
	nil,                                // 28: media.HealthCheckResponse.MetadataEntry
	nil,                                // 29: media.FileChunk.ChunkMetadataEntry
	nil,                                // 30: media.UploadLargeFileRequest.MetadataEntry
	nil,                                // 31: media.ProcessingRequest.ParametersEntry
	nil,                                // 32: media.ProcessingResponse.MetadataEntry
	nil,                                // 33: media.FileMetadata.MetadataEntry
	nil,                                // 34: media.ProcessingStatus.MetadataEntry
	nil,                                // 35: media.ProcessingResult.MetadataEntry
	nil,                                // 36: media.StorageMetrics.StorageByCategoryEntry
	nil,                                // 37: media.StorageMetrics.FilesByCategoryEntry
	(*timestamppb.Timestamp)(nil),      // 38: google.protobuf.Timestamp
}
var file_media_proto_depIdxs = []int32{
	26, // 0: media.UploadFileRequest.metadata:type_name -> media.UploadFileRequest.MetadataEntry
	21, // 1: media.UploadFileResponse.metadata:type_name -> media.FileMetadata
	22, // 2: media.UploadFileResponse.processing_status:type_name -> media.ProcessingStatus
	38, // 3: media.UploadFileResponse.uploaded_at:type_name -> google.protobuf.Timestamp
	21, // 4: media.DownloadFileResponse.metadata:type_name -> media.FileMetadata
	21, // 5: media.GetFileMetadataResponse.metadata:type_name -> media.FileMetadata
	22, // 6: media.GetFileMetadataResponse.processing_status:type_name -> media.ProcessingStatus
	27, // 7: media.UpdateFileMetadataRequest.metadata:type_name -> media.UpdateFileMetadataRequest.MetadataEntry
	21, // 8: media.UpdateFileMetadataResponse.metadata:type_name -> media.FileMetadata
	21, // 9: media.ListFilesResponse.files:type_name -> media.FileMetadata
	38, // 10: media.HealthCheckResponse.timestamp:type_name -> google.protobuf.Timestamp
	28, // 11: media.HealthCheckResponse.metadata:type_name -> media.HealthCheckResponse.MetadataEntry
	25, // 12: media.HealthCheckResponse.storage_metrics:type_name -> media.StorageMetrics
	21, // 13: media.FileChunk.metadata:type_name -> media.FileMetadata
	38, // 14: media.FileChunk.timestamp:type_name -> google.protobuf.Timestamp
	29, // 15: media.FileChunk.chunk_metadata:type_name -> media.FileChunk.ChunkMetadataEntry
	30, // 16: media.UploadLargeFileRequest.metadata:type_name -> media.UploadLargeFileRequest.MetadataEntry
	1,  // 17: media.ProcessingRequest.operation:type_name -> media.ProcessingOperation
	31, // 18: media.ProcessingRequest.parameters:type_name -> media.ProcessingRequest.ParametersEntry
	38, // 19: media.ProcessingRequest.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 20: media.ProcessingResponse.operation:type_name -> media.ProcessingOperation
	22, // 21: media.ProcessingResponse.status:type_name -> media.ProcessingStatus
	24, // 22: media.ProcessingResponse.result:type_name -> media.ProcessingResult
	38, // 23: media.ProcessingResponse.timestamp:type_name -> google.protobuf.Timestamp
	32, // 24: media.ProcessingResponse.metadata:type_name -> media.ProcessingResponse.MetadataEntry
	0,  // 25: media.FileMetadata.status:type_name -> media.FileStatus
	22, // 26: media.FileMetadata.processing_status:type_name -> media.ProcessingStatus
	38, // 27: media.FileMetadata.created_at:type_name -> google.protobuf.Timestamp
	38, // 28: media.FileMetadata.updated_at:type_name -> google.protobuf.Timestamp
	38, // 29: media.FileMetadata.last_accessed:type_name -> google.protobuf.Timestamp
	33, // 30: media.FileMetadata.metadata:type_name -> media.FileMetadata.MetadataEntry
	23, // 31: media.ProcessingStatus.steps:type_name -> media.ProcessingStep
	38, // 32: media.ProcessingStatus.started_at:type_name -> google.protobuf.Timestamp
	38, // 33: media.ProcessingStatus.completed_at:type_name -> google.protobuf.Timestamp
	34, // 34: media.ProcessingStatus.metadata:type_name -> media.ProcessingStatus.MetadataEntry
	38, // 35: media.ProcessingStep.started_at:type_name -> google.protobuf.Timestamp
	38, // 36: media.ProcessingStep.completed_at:type_name -> google.protobuf.Timestamp
	35, // 37: media.ProcessingResult.metadata:type_name -> media.ProcessingResult.MetadataEntry
	36, // 38: media.StorageMetrics.storage_by_category:type_name -> media.StorageMetrics.StorageByCategoryEntry
	37, // 39: media.StorageMetrics.files_by_category:type_name -> media.StorageMetrics.FilesByCategoryEntry
	2,  // 40: media.MediaStreamingService.UploadFile:input_type -> media.UploadFileRequest
	4,  // 41: media.MediaStreamingService.DownloadFile:input_type -> media.DownloadFileRequest
	6,  // 42: media.MediaStreamingService.GetFileMetadata:input_type -> media.GetFileMetadataRequest
	8,  // 43: media.MediaStreamingService.UpdateFileMetadata:input_type -> media.UpdateFileMetadataRequest
	10, // 44: media.MediaStreamingService.DeleteFile:input_type -> media.DeleteFileRequest
	12, // 45: media.MediaStreamingService.ListFiles:input_type -> media.ListFilesRequest
	14, // 46: media.MediaStreamingService.HealthCheck:input_type -> media.HealthCheckRequest
	16, // 47: media.MediaStreamingService.StreamFile:input_type -> media.StreamFileRequest
	17, // 48: media.MediaStreamingService.UploadLargeFile:input_type -> media.FileChunk
	19, // 49: media.MediaStreamingService.ProcessFile:input_type -> media.ProcessingRequest
	3,  // 50: media.MediaStreamingService.UploadFile:output_type -> media.UploadFileResponse
	5,  // 51: media.MediaStreamingService.DownloadFile:output_type -> media.DownloadFileResponse
	7,  // 52: media.MediaStreamingService.GetFileMetadata:output_type -> media.GetFileMetadataResponse
	9,  // 53: media.MediaStreamingService.UpdateFileMetadata:output_type -> media.UpdateFileMetadataResponse
	11, // 54: media.MediaStreamingService.DeleteFile:output_type -> media.DeleteFileResponse
	13, // 55: media.MediaStreamingService.ListFiles:output_type -> media.ListFilesResponse
	15, // 56: media.MediaStreamingService.HealthCheck:output_type -> media.HealthCheckResponse
	17, // 57: media.MediaStreamingService.StreamFile:output_type -> media.FileChunk
	3,  // 58: media.MediaStreamingService.UploadLargeFile:output_type -> media.UploadFileResponse
	20, // 59: media.MediaStreamingService.ProcessFile:output_type -> media.ProcessingResponse
	50, // [50:60] is the sub-list for method output_type
	40, // [40:50] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_media_proto_init() }
func file_media_proto_init() {
	if File_media_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_media_proto_rawDesc), len(file_media_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_proto_goTypes,
		DependencyIndexes: file_media_proto_depIdxs,
		EnumInfos:         file_media_proto_enumTypes,
		MessageInfos:      file_media_proto_msgTypes,
	}.Build()
	File_media_proto = out.File
	file_media_proto_goTypes = nil
	file_media_proto_depIdxs = nil
}
