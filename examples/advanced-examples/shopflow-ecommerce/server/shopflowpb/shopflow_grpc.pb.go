// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: shopflow.proto

package shopflowpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShopFlowService_CreateProduct_FullMethodName         = "/shopflow.ShopFlowService/CreateProduct"
	ShopFlowService_GetProduct_FullMethodName            = "/shopflow.ShopFlowService/GetProduct"
	ShopFlowService_UpdateProduct_FullMethodName         = "/shopflow.ShopFlowService/UpdateProduct"
	ShopFlowService_DeleteProduct_FullMethodName         = "/shopflow.ShopFlowService/DeleteProduct"
	ShopFlowService_CreateOrder_FullMethodName           = "/shopflow.ShopFlowService/CreateOrder"
	ShopFlowService_GetOrder_FullMethodName              = "/shopflow.ShopFlowService/GetOrder"
	ShopFlowService_UpdateOrderStatus_FullMethodName     = "/shopflow.ShopFlowService/UpdateOrderStatus"
	ShopFlowService_ProcessPayment_FullMethodName        = "/shopflow.ShopFlowService/ProcessPayment"
	ShopFlowService_RefundPayment_FullMethodName         = "/shopflow.ShopFlowService/RefundPayment"
	ShopFlowService_StreamProductUpdates_FullMethodName  = "/shopflow.ShopFlowService/StreamProductUpdates"
	ShopFlowService_StreamOrderStatus_FullMethodName     = "/shopflow.ShopFlowService/StreamOrderStatus"
	ShopFlowService_StreamInventoryAlerts_FullMethodName = "/shopflow.ShopFlowService/StreamInventoryAlerts"
	ShopFlowService_BulkCreateProducts_FullMethodName    = "/shopflow.ShopFlowService/BulkCreateProducts"
	ShopFlowService_BulkUpdateInventory_FullMethodName   = "/shopflow.ShopFlowService/BulkUpdateInventory"
	ShopFlowService_RealTimeChat_FullMethodName          = "/shopflow.ShopFlowService/RealTimeChat"
	ShopFlowService_LiveOrderTracking_FullMethodName     = "/shopflow.ShopFlowService/LiveOrderTracking"
	ShopFlowService_HealthCheck_FullMethodName           = "/shopflow.ShopFlowService/HealthCheck"
	ShopFlowService_GetMetrics_FullMethodName            = "/shopflow.ShopFlowService/GetMetrics"
)

// ShopFlowServiceClient is the client API for ShopFlowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopFlowServiceClient interface {
	// Unary RPCs
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error)
	UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error)
	DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error)
	// Server Streaming RPCs
	StreamProductUpdates(ctx context.Context, in *StreamProductUpdatesRequest, opts ...grpc.CallOption) (ShopFlowService_StreamProductUpdatesClient, error)
	StreamOrderStatus(ctx context.Context, in *StreamOrderStatusRequest, opts ...grpc.CallOption) (ShopFlowService_StreamOrderStatusClient, error)
	StreamInventoryAlerts(ctx context.Context, in *StreamInventoryAlertsRequest, opts ...grpc.CallOption) (ShopFlowService_StreamInventoryAlertsClient, error)
	// Client Streaming RPCs
	BulkCreateProducts(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_BulkCreateProductsClient, error)
	BulkUpdateInventory(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_BulkUpdateInventoryClient, error)
	// Bidirectional Streaming RPCs
	RealTimeChat(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_RealTimeChatClient, error)
	LiveOrderTracking(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_LiveOrderTrackingClient, error)
	// Health and monitoring
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
}

type shopFlowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopFlowServiceClient(cc grpc.ClientConnInterface) ShopFlowServiceClient {
	return &shopFlowServiceClient{cc}
}

func (c *shopFlowServiceClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*GetProductResponse, error) {
	out := new(GetProductResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductRequest, opts ...grpc.CallOption) (*UpdateProductResponse, error) {
	out := new(UpdateProductResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...grpc.CallOption) (*DeleteProductResponse, error) {
	out := new(DeleteProductResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	out := new(UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_UpdateOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_ProcessPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error) {
	out := new(RefundPaymentResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_RefundPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) StreamProductUpdates(ctx context.Context, in *StreamProductUpdatesRequest, opts ...grpc.CallOption) (ShopFlowService_StreamProductUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopFlowService_ServiceDesc.Streams[0], ShopFlowService_StreamProductUpdates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopFlowServiceStreamProductUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShopFlowService_StreamProductUpdatesClient interface {
	Recv() (*ProductUpdate, error)
	grpc.ClientStream
}

type shopFlowServiceStreamProductUpdatesClient struct {
	grpc.ClientStream
}

func (x *shopFlowServiceStreamProductUpdatesClient) Recv() (*ProductUpdate, error) {
	m := new(ProductUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopFlowServiceClient) StreamOrderStatus(ctx context.Context, in *StreamOrderStatusRequest, opts ...grpc.CallOption) (ShopFlowService_StreamOrderStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopFlowService_ServiceDesc.Streams[1], ShopFlowService_StreamOrderStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopFlowServiceStreamOrderStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShopFlowService_StreamOrderStatusClient interface {
	Recv() (*OrderStatusUpdate, error)
	grpc.ClientStream
}

type shopFlowServiceStreamOrderStatusClient struct {
	grpc.ClientStream
}

func (x *shopFlowServiceStreamOrderStatusClient) Recv() (*OrderStatusUpdate, error) {
	m := new(OrderStatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopFlowServiceClient) StreamInventoryAlerts(ctx context.Context, in *StreamInventoryAlertsRequest, opts ...grpc.CallOption) (ShopFlowService_StreamInventoryAlertsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopFlowService_ServiceDesc.Streams[2], ShopFlowService_StreamInventoryAlerts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopFlowServiceStreamInventoryAlertsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShopFlowService_StreamInventoryAlertsClient interface {
	Recv() (*InventoryAlert, error)
	grpc.ClientStream
}

type shopFlowServiceStreamInventoryAlertsClient struct {
	grpc.ClientStream
}

func (x *shopFlowServiceStreamInventoryAlertsClient) Recv() (*InventoryAlert, error) {
	m := new(InventoryAlert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopFlowServiceClient) BulkCreateProducts(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_BulkCreateProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopFlowService_ServiceDesc.Streams[3], ShopFlowService_BulkCreateProducts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopFlowServiceBulkCreateProductsClient{stream}
	return x, nil
}

type ShopFlowService_BulkCreateProductsClient interface {
	Send(*CreateProductRequest) error
	CloseAndRecv() (*BulkCreateProductsResponse, error)
	grpc.ClientStream
}

type shopFlowServiceBulkCreateProductsClient struct {
	grpc.ClientStream
}

func (x *shopFlowServiceBulkCreateProductsClient) Send(m *CreateProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shopFlowServiceBulkCreateProductsClient) CloseAndRecv() (*BulkCreateProductsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkCreateProductsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopFlowServiceClient) BulkUpdateInventory(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_BulkUpdateInventoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopFlowService_ServiceDesc.Streams[4], ShopFlowService_BulkUpdateInventory_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopFlowServiceBulkUpdateInventoryClient{stream}
	return x, nil
}

type ShopFlowService_BulkUpdateInventoryClient interface {
	Send(*UpdateInventoryRequest) error
	CloseAndRecv() (*BulkUpdateInventoryResponse, error)
	grpc.ClientStream
}

type shopFlowServiceBulkUpdateInventoryClient struct {
	grpc.ClientStream
}

func (x *shopFlowServiceBulkUpdateInventoryClient) Send(m *UpdateInventoryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shopFlowServiceBulkUpdateInventoryClient) CloseAndRecv() (*BulkUpdateInventoryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkUpdateInventoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopFlowServiceClient) RealTimeChat(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_RealTimeChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopFlowService_ServiceDesc.Streams[5], ShopFlowService_RealTimeChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopFlowServiceRealTimeChatClient{stream}
	return x, nil
}

type ShopFlowService_RealTimeChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type shopFlowServiceRealTimeChatClient struct {
	grpc.ClientStream
}

func (x *shopFlowServiceRealTimeChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shopFlowServiceRealTimeChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopFlowServiceClient) LiveOrderTracking(ctx context.Context, opts ...grpc.CallOption) (ShopFlowService_LiveOrderTrackingClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopFlowService_ServiceDesc.Streams[6], ShopFlowService_LiveOrderTracking_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &shopFlowServiceLiveOrderTrackingClient{stream}
	return x, nil
}

type ShopFlowService_LiveOrderTrackingClient interface {
	Send(*OrderTrackingRequest) error
	Recv() (*OrderTrackingUpdate, error)
	grpc.ClientStream
}

type shopFlowServiceLiveOrderTrackingClient struct {
	grpc.ClientStream
}

func (x *shopFlowServiceLiveOrderTrackingClient) Send(m *OrderTrackingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shopFlowServiceLiveOrderTrackingClient) Recv() (*OrderTrackingUpdate, error) {
	m := new(OrderTrackingUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopFlowServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopFlowServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, ShopFlowService_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopFlowServiceServer is the server API for ShopFlowService service.
// All implementations must embed UnimplementedShopFlowServiceServer
// for forward compatibility
type ShopFlowServiceServer interface {
	// Unary RPCs
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error)
	UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error)
	// Server Streaming RPCs
	StreamProductUpdates(*StreamProductUpdatesRequest, ShopFlowService_StreamProductUpdatesServer) error
	StreamOrderStatus(*StreamOrderStatusRequest, ShopFlowService_StreamOrderStatusServer) error
	StreamInventoryAlerts(*StreamInventoryAlertsRequest, ShopFlowService_StreamInventoryAlertsServer) error
	// Client Streaming RPCs
	BulkCreateProducts(ShopFlowService_BulkCreateProductsServer) error
	BulkUpdateInventory(ShopFlowService_BulkUpdateInventoryServer) error
	// Bidirectional Streaming RPCs
	RealTimeChat(ShopFlowService_RealTimeChatServer) error
	LiveOrderTracking(ShopFlowService_LiveOrderTrackingServer) error
	// Health and monitoring
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	mustEmbedUnimplementedShopFlowServiceServer()
}

// UnimplementedShopFlowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShopFlowServiceServer struct {
}

func (UnimplementedShopFlowServiceServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedShopFlowServiceServer) GetProduct(context.Context, *GetProductRequest) (*GetProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedShopFlowServiceServer) UpdateProduct(context.Context, *UpdateProductRequest) (*UpdateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedShopFlowServiceServer) DeleteProduct(context.Context, *DeleteProductRequest) (*DeleteProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedShopFlowServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedShopFlowServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedShopFlowServiceServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedShopFlowServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedShopFlowServiceServer) RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPayment not implemented")
}
func (UnimplementedShopFlowServiceServer) StreamProductUpdates(*StreamProductUpdatesRequest, ShopFlowService_StreamProductUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamProductUpdates not implemented")
}
func (UnimplementedShopFlowServiceServer) StreamOrderStatus(*StreamOrderStatusRequest, ShopFlowService_StreamOrderStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderStatus not implemented")
}
func (UnimplementedShopFlowServiceServer) StreamInventoryAlerts(*StreamInventoryAlertsRequest, ShopFlowService_StreamInventoryAlertsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamInventoryAlerts not implemented")
}
func (UnimplementedShopFlowServiceServer) BulkCreateProducts(ShopFlowService_BulkCreateProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkCreateProducts not implemented")
}
func (UnimplementedShopFlowServiceServer) BulkUpdateInventory(ShopFlowService_BulkUpdateInventoryServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkUpdateInventory not implemented")
}
func (UnimplementedShopFlowServiceServer) RealTimeChat(ShopFlowService_RealTimeChatServer) error {
	return status.Errorf(codes.Unimplemented, "method RealTimeChat not implemented")
}
func (UnimplementedShopFlowServiceServer) LiveOrderTracking(ShopFlowService_LiveOrderTrackingServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveOrderTracking not implemented")
}
func (UnimplementedShopFlowServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedShopFlowServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedShopFlowServiceServer) mustEmbedUnimplementedShopFlowServiceServer() {}

// UnsafeShopFlowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopFlowServiceServer will
// result in compilation errors.
type UnsafeShopFlowServiceServer interface {
	mustEmbedUnimplementedShopFlowServiceServer()
}

func RegisterShopFlowServiceServer(s grpc.ServiceRegistrar, srv ShopFlowServiceServer) {
	s.RegisterService(&ShopFlowService_ServiceDesc, srv)
}

func _ShopFlowService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).UpdateProduct(ctx, req.(*UpdateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).DeleteProduct(ctx, req.(*DeleteProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_RefundPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).RefundPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_RefundPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).RefundPayment(ctx, req.(*RefundPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_StreamProductUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamProductUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShopFlowServiceServer).StreamProductUpdates(m, &shopFlowServiceStreamProductUpdatesServer{stream})
}

type ShopFlowService_StreamProductUpdatesServer interface {
	Send(*ProductUpdate) error
	grpc.ServerStream
}

type shopFlowServiceStreamProductUpdatesServer struct {
	grpc.ServerStream
}

func (x *shopFlowServiceStreamProductUpdatesServer) Send(m *ProductUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _ShopFlowService_StreamOrderStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShopFlowServiceServer).StreamOrderStatus(m, &shopFlowServiceStreamOrderStatusServer{stream})
}

type ShopFlowService_StreamOrderStatusServer interface {
	Send(*OrderStatusUpdate) error
	grpc.ServerStream
}

type shopFlowServiceStreamOrderStatusServer struct {
	grpc.ServerStream
}

func (x *shopFlowServiceStreamOrderStatusServer) Send(m *OrderStatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _ShopFlowService_StreamInventoryAlerts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamInventoryAlertsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShopFlowServiceServer).StreamInventoryAlerts(m, &shopFlowServiceStreamInventoryAlertsServer{stream})
}

type ShopFlowService_StreamInventoryAlertsServer interface {
	Send(*InventoryAlert) error
	grpc.ServerStream
}

type shopFlowServiceStreamInventoryAlertsServer struct {
	grpc.ServerStream
}

func (x *shopFlowServiceStreamInventoryAlertsServer) Send(m *InventoryAlert) error {
	return x.ServerStream.SendMsg(m)
}

func _ShopFlowService_BulkCreateProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShopFlowServiceServer).BulkCreateProducts(&shopFlowServiceBulkCreateProductsServer{stream})
}

type ShopFlowService_BulkCreateProductsServer interface {
	SendAndClose(*BulkCreateProductsResponse) error
	Recv() (*CreateProductRequest, error)
	grpc.ServerStream
}

type shopFlowServiceBulkCreateProductsServer struct {
	grpc.ServerStream
}

func (x *shopFlowServiceBulkCreateProductsServer) SendAndClose(m *BulkCreateProductsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shopFlowServiceBulkCreateProductsServer) Recv() (*CreateProductRequest, error) {
	m := new(CreateProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShopFlowService_BulkUpdateInventory_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShopFlowServiceServer).BulkUpdateInventory(&shopFlowServiceBulkUpdateInventoryServer{stream})
}

type ShopFlowService_BulkUpdateInventoryServer interface {
	SendAndClose(*BulkUpdateInventoryResponse) error
	Recv() (*UpdateInventoryRequest, error)
	grpc.ServerStream
}

type shopFlowServiceBulkUpdateInventoryServer struct {
	grpc.ServerStream
}

func (x *shopFlowServiceBulkUpdateInventoryServer) SendAndClose(m *BulkUpdateInventoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shopFlowServiceBulkUpdateInventoryServer) Recv() (*UpdateInventoryRequest, error) {
	m := new(UpdateInventoryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShopFlowService_RealTimeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShopFlowServiceServer).RealTimeChat(&shopFlowServiceRealTimeChatServer{stream})
}

type ShopFlowService_RealTimeChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type shopFlowServiceRealTimeChatServer struct {
	grpc.ServerStream
}

func (x *shopFlowServiceRealTimeChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shopFlowServiceRealTimeChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShopFlowService_LiveOrderTracking_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShopFlowServiceServer).LiveOrderTracking(&shopFlowServiceLiveOrderTrackingServer{stream})
}

type ShopFlowService_LiveOrderTrackingServer interface {
	Send(*OrderTrackingUpdate) error
	Recv() (*OrderTrackingRequest, error)
	grpc.ServerStream
}

type shopFlowServiceLiveOrderTrackingServer struct {
	grpc.ServerStream
}

func (x *shopFlowServiceLiveOrderTrackingServer) Send(m *OrderTrackingUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shopFlowServiceLiveOrderTrackingServer) Recv() (*OrderTrackingRequest, error) {
	m := new(OrderTrackingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShopFlowService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopFlowService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopFlowServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopFlowService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopFlowServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopFlowService_ServiceDesc is the grpc.ServiceDesc for ShopFlowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopFlowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopflow.ShopFlowService",
	HandlerType: (*ShopFlowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ShopFlowService_CreateProduct_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ShopFlowService_GetProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _ShopFlowService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ShopFlowService_DeleteProduct_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _ShopFlowService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ShopFlowService_GetOrder_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _ShopFlowService_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _ShopFlowService_ProcessPayment_Handler,
		},
		{
			MethodName: "RefundPayment",
			Handler:    _ShopFlowService_RefundPayment_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ShopFlowService_HealthCheck_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _ShopFlowService_GetMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamProductUpdates",
			Handler:       _ShopFlowService_StreamProductUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamOrderStatus",
			Handler:       _ShopFlowService_StreamOrderStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamInventoryAlerts",
			Handler:       _ShopFlowService_StreamInventoryAlerts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkCreateProducts",
			Handler:       _ShopFlowService_BulkCreateProducts_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BulkUpdateInventory",
			Handler:       _ShopFlowService_BulkUpdateInventory_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RealTimeChat",
			Handler:       _ShopFlowService_RealTimeChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LiveOrderTracking",
			Handler:       _ShopFlowService_LiveOrderTracking_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shopflow.proto",
}
