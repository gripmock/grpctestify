// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: chat.proto

package aichatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AIChatService_SendMessage_FullMethodName         = "/aichat.AIChatService/SendMessage"
	AIChatService_GetChatHistory_FullMethodName      = "/aichat.AIChatService/GetChatHistory"
	AIChatService_CreateChatSession_FullMethodName   = "/aichat.AIChatService/CreateChatSession"
	AIChatService_UpdateChatSettings_FullMethodName  = "/aichat.AIChatService/UpdateChatSettings"
	AIChatService_AnalyzeSentiment_FullMethodName    = "/aichat.AIChatService/AnalyzeSentiment"
	AIChatService_HealthCheck_FullMethodName         = "/aichat.AIChatService/HealthCheck"
	AIChatService_StreamChat_FullMethodName          = "/aichat.AIChatService/StreamChat"
	AIChatService_BulkProcessMessages_FullMethodName = "/aichat.AIChatService/BulkProcessMessages"
	AIChatService_ChatConversation_FullMethodName    = "/aichat.AIChatService/ChatConversation"
)

// AIChatServiceClient is the client API for AIChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIChatServiceClient interface {
	// Unary RPCs
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	GetChatHistory(ctx context.Context, in *GetChatHistoryRequest, opts ...grpc.CallOption) (*GetChatHistoryResponse, error)
	CreateChatSession(ctx context.Context, in *CreateChatSessionRequest, opts ...grpc.CallOption) (*CreateChatSessionResponse, error)
	UpdateChatSettings(ctx context.Context, in *UpdateChatSettingsRequest, opts ...grpc.CallOption) (*UpdateChatSettingsResponse, error)
	AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Server Streaming - Real-time AI responses
	StreamChat(ctx context.Context, in *StreamChatRequest, opts ...grpc.CallOption) (AIChatService_StreamChatClient, error)
	// Client Streaming - Bulk message processing
	BulkProcessMessages(ctx context.Context, opts ...grpc.CallOption) (AIChatService_BulkProcessMessagesClient, error)
	// Bidirectional Streaming - Real-time conversation
	ChatConversation(ctx context.Context, opts ...grpc.CallOption) (AIChatService_ChatConversationClient, error)
}

type aIChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIChatServiceClient(cc grpc.ClientConnInterface) AIChatServiceClient {
	return &aIChatServiceClient{cc}
}

func (c *aIChatServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, AIChatService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIChatServiceClient) GetChatHistory(ctx context.Context, in *GetChatHistoryRequest, opts ...grpc.CallOption) (*GetChatHistoryResponse, error) {
	out := new(GetChatHistoryResponse)
	err := c.cc.Invoke(ctx, AIChatService_GetChatHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIChatServiceClient) CreateChatSession(ctx context.Context, in *CreateChatSessionRequest, opts ...grpc.CallOption) (*CreateChatSessionResponse, error) {
	out := new(CreateChatSessionResponse)
	err := c.cc.Invoke(ctx, AIChatService_CreateChatSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIChatServiceClient) UpdateChatSettings(ctx context.Context, in *UpdateChatSettingsRequest, opts ...grpc.CallOption) (*UpdateChatSettingsResponse, error) {
	out := new(UpdateChatSettingsResponse)
	err := c.cc.Invoke(ctx, AIChatService_UpdateChatSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIChatServiceClient) AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error) {
	out := new(AnalyzeSentimentResponse)
	err := c.cc.Invoke(ctx, AIChatService_AnalyzeSentiment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIChatServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AIChatService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIChatServiceClient) StreamChat(ctx context.Context, in *StreamChatRequest, opts ...grpc.CallOption) (AIChatService_StreamChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &AIChatService_ServiceDesc.Streams[0], AIChatService_StreamChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aIChatServiceStreamChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AIChatService_StreamChatClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type aIChatServiceStreamChatClient struct {
	grpc.ClientStream
}

func (x *aIChatServiceStreamChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aIChatServiceClient) BulkProcessMessages(ctx context.Context, opts ...grpc.CallOption) (AIChatService_BulkProcessMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AIChatService_ServiceDesc.Streams[1], AIChatService_BulkProcessMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aIChatServiceBulkProcessMessagesClient{stream}
	return x, nil
}

type AIChatService_BulkProcessMessagesClient interface {
	Send(*BulkMessageRequest) error
	CloseAndRecv() (*BulkProcessResponse, error)
	grpc.ClientStream
}

type aIChatServiceBulkProcessMessagesClient struct {
	grpc.ClientStream
}

func (x *aIChatServiceBulkProcessMessagesClient) Send(m *BulkMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aIChatServiceBulkProcessMessagesClient) CloseAndRecv() (*BulkProcessResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aIChatServiceClient) ChatConversation(ctx context.Context, opts ...grpc.CallOption) (AIChatService_ChatConversationClient, error) {
	stream, err := c.cc.NewStream(ctx, &AIChatService_ServiceDesc.Streams[2], AIChatService_ChatConversation_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &aIChatServiceChatConversationClient{stream}
	return x, nil
}

type AIChatService_ChatConversationClient interface {
	Send(*UserMessage) error
	Recv() (*AIResponse, error)
	grpc.ClientStream
}

type aIChatServiceChatConversationClient struct {
	grpc.ClientStream
}

func (x *aIChatServiceChatConversationClient) Send(m *UserMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aIChatServiceChatConversationClient) Recv() (*AIResponse, error) {
	m := new(AIResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AIChatServiceServer is the server API for AIChatService service.
// All implementations must embed UnimplementedAIChatServiceServer
// for forward compatibility
type AIChatServiceServer interface {
	// Unary RPCs
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	GetChatHistory(context.Context, *GetChatHistoryRequest) (*GetChatHistoryResponse, error)
	CreateChatSession(context.Context, *CreateChatSessionRequest) (*CreateChatSessionResponse, error)
	UpdateChatSettings(context.Context, *UpdateChatSettingsRequest) (*UpdateChatSettingsResponse, error)
	AnalyzeSentiment(context.Context, *AnalyzeSentimentRequest) (*AnalyzeSentimentResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Server Streaming - Real-time AI responses
	StreamChat(*StreamChatRequest, AIChatService_StreamChatServer) error
	// Client Streaming - Bulk message processing
	BulkProcessMessages(AIChatService_BulkProcessMessagesServer) error
	// Bidirectional Streaming - Real-time conversation
	ChatConversation(AIChatService_ChatConversationServer) error
	mustEmbedUnimplementedAIChatServiceServer()
}

// UnimplementedAIChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAIChatServiceServer struct {
}

func (UnimplementedAIChatServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedAIChatServiceServer) GetChatHistory(context.Context, *GetChatHistoryRequest) (*GetChatHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatHistory not implemented")
}
func (UnimplementedAIChatServiceServer) CreateChatSession(context.Context, *CreateChatSessionRequest) (*CreateChatSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatSession not implemented")
}
func (UnimplementedAIChatServiceServer) UpdateChatSettings(context.Context, *UpdateChatSettingsRequest) (*UpdateChatSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatSettings not implemented")
}
func (UnimplementedAIChatServiceServer) AnalyzeSentiment(context.Context, *AnalyzeSentimentRequest) (*AnalyzeSentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSentiment not implemented")
}
func (UnimplementedAIChatServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAIChatServiceServer) StreamChat(*StreamChatRequest, AIChatService_StreamChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChat not implemented")
}
func (UnimplementedAIChatServiceServer) BulkProcessMessages(AIChatService_BulkProcessMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkProcessMessages not implemented")
}
func (UnimplementedAIChatServiceServer) ChatConversation(AIChatService_ChatConversationServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatConversation not implemented")
}
func (UnimplementedAIChatServiceServer) mustEmbedUnimplementedAIChatServiceServer() {}

// UnsafeAIChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIChatServiceServer will
// result in compilation errors.
type UnsafeAIChatServiceServer interface {
	mustEmbedUnimplementedAIChatServiceServer()
}

func RegisterAIChatServiceServer(s grpc.ServiceRegistrar, srv AIChatServiceServer) {
	s.RegisterService(&AIChatService_ServiceDesc, srv)
}

func _AIChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIChatService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIChatServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIChatService_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIChatServiceServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIChatService_GetChatHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIChatServiceServer).GetChatHistory(ctx, req.(*GetChatHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIChatService_CreateChatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIChatServiceServer).CreateChatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIChatService_CreateChatSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIChatServiceServer).CreateChatSession(ctx, req.(*CreateChatSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIChatService_UpdateChatSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIChatServiceServer).UpdateChatSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIChatService_UpdateChatSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIChatServiceServer).UpdateChatSettings(ctx, req.(*UpdateChatSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIChatService_AnalyzeSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeSentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIChatServiceServer).AnalyzeSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIChatService_AnalyzeSentiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIChatServiceServer).AnalyzeSentiment(ctx, req.(*AnalyzeSentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIChatService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIChatServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIChatService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIChatServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIChatService_StreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIChatServiceServer).StreamChat(m, &aIChatServiceStreamChatServer{stream})
}

type AIChatService_StreamChatServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type aIChatServiceStreamChatServer struct {
	grpc.ServerStream
}

func (x *aIChatServiceStreamChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _AIChatService_BulkProcessMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AIChatServiceServer).BulkProcessMessages(&aIChatServiceBulkProcessMessagesServer{stream})
}

type AIChatService_BulkProcessMessagesServer interface {
	SendAndClose(*BulkProcessResponse) error
	Recv() (*BulkMessageRequest, error)
	grpc.ServerStream
}

type aIChatServiceBulkProcessMessagesServer struct {
	grpc.ServerStream
}

func (x *aIChatServiceBulkProcessMessagesServer) SendAndClose(m *BulkProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aIChatServiceBulkProcessMessagesServer) Recv() (*BulkMessageRequest, error) {
	m := new(BulkMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AIChatService_ChatConversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AIChatServiceServer).ChatConversation(&aIChatServiceChatConversationServer{stream})
}

type AIChatService_ChatConversationServer interface {
	Send(*AIResponse) error
	Recv() (*UserMessage, error)
	grpc.ServerStream
}

type aIChatServiceChatConversationServer struct {
	grpc.ServerStream
}

func (x *aIChatServiceChatConversationServer) Send(m *AIResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aIChatServiceChatConversationServer) Recv() (*UserMessage, error) {
	m := new(UserMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AIChatService_ServiceDesc is the grpc.ServiceDesc for AIChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aichat.AIChatService",
	HandlerType: (*AIChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _AIChatService_SendMessage_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _AIChatService_GetChatHistory_Handler,
		},
		{
			MethodName: "CreateChatSession",
			Handler:    _AIChatService_CreateChatSession_Handler,
		},
		{
			MethodName: "UpdateChatSettings",
			Handler:    _AIChatService_UpdateChatSettings_Handler,
		},
		{
			MethodName: "AnalyzeSentiment",
			Handler:    _AIChatService_AnalyzeSentiment_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AIChatService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChat",
			Handler:       _AIChatService_StreamChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkProcessMessages",
			Handler:       _AIChatService_BulkProcessMessages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChatConversation",
			Handler:       _AIChatService_ChatConversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
