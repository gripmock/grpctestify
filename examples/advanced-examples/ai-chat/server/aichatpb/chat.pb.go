// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: chat.proto

package aichatpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNKNOWN MessageType = 0
	MessageType_MESSAGE_TYPE_TEXT    MessageType = 1
	MessageType_MESSAGE_TYPE_IMAGE   MessageType = 2
	MessageType_MESSAGE_TYPE_AUDIO   MessageType = 3
	MessageType_MESSAGE_TYPE_FILE    MessageType = 4
	MessageType_MESSAGE_TYPE_COMMAND MessageType = 5
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNKNOWN",
		1: "MESSAGE_TYPE_TEXT",
		2: "MESSAGE_TYPE_IMAGE",
		3: "MESSAGE_TYPE_AUDIO",
		4: "MESSAGE_TYPE_FILE",
		5: "MESSAGE_TYPE_COMMAND",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNKNOWN": 0,
		"MESSAGE_TYPE_TEXT":    1,
		"MESSAGE_TYPE_IMAGE":   2,
		"MESSAGE_TYPE_AUDIO":   3,
		"MESSAGE_TYPE_FILE":    4,
		"MESSAGE_TYPE_COMMAND": 5,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

type MessageRole int32

const (
	MessageRole_MESSAGE_ROLE_UNKNOWN   MessageRole = 0
	MessageRole_MESSAGE_ROLE_USER      MessageRole = 1
	MessageRole_MESSAGE_ROLE_ASSISTANT MessageRole = 2
	MessageRole_MESSAGE_ROLE_SYSTEM    MessageRole = 3
)

// Enum value maps for MessageRole.
var (
	MessageRole_name = map[int32]string{
		0: "MESSAGE_ROLE_UNKNOWN",
		1: "MESSAGE_ROLE_USER",
		2: "MESSAGE_ROLE_ASSISTANT",
		3: "MESSAGE_ROLE_SYSTEM",
	}
	MessageRole_value = map[string]int32{
		"MESSAGE_ROLE_UNKNOWN":   0,
		"MESSAGE_ROLE_USER":      1,
		"MESSAGE_ROLE_ASSISTANT": 2,
		"MESSAGE_ROLE_SYSTEM":    3,
	}
)

func (x MessageRole) Enum() *MessageRole {
	p := new(MessageRole)
	*p = x
	return p
}

func (x MessageRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageRole) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[1].Descriptor()
}

func (MessageRole) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[1]
}

func (x MessageRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageRole.Descriptor instead.
func (MessageRole) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

type SessionStatus int32

const (
	SessionStatus_SESSION_STATUS_UNKNOWN  SessionStatus = 0
	SessionStatus_SESSION_STATUS_ACTIVE   SessionStatus = 1
	SessionStatus_SESSION_STATUS_PAUSED   SessionStatus = 2
	SessionStatus_SESSION_STATUS_ARCHIVED SessionStatus = 3
	SessionStatus_SESSION_STATUS_DELETED  SessionStatus = 4
)

// Enum value maps for SessionStatus.
var (
	SessionStatus_name = map[int32]string{
		0: "SESSION_STATUS_UNKNOWN",
		1: "SESSION_STATUS_ACTIVE",
		2: "SESSION_STATUS_PAUSED",
		3: "SESSION_STATUS_ARCHIVED",
		4: "SESSION_STATUS_DELETED",
	}
	SessionStatus_value = map[string]int32{
		"SESSION_STATUS_UNKNOWN":  0,
		"SESSION_STATUS_ACTIVE":   1,
		"SESSION_STATUS_PAUSED":   2,
		"SESSION_STATUS_ARCHIVED": 3,
		"SESSION_STATUS_DELETED":  4,
	}
)

func (x SessionStatus) Enum() *SessionStatus {
	p := new(SessionStatus)
	*p = x
	return p
}

func (x SessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[2].Descriptor()
}

func (SessionStatus) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[2]
}

func (x SessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStatus.Descriptor instead.
func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

type ResponseType int32

const (
	ResponseType_RESPONSE_TYPE_UNKNOWN   ResponseType = 0
	ResponseType_RESPONSE_TYPE_TEXT      ResponseType = 1
	ResponseType_RESPONSE_TYPE_STREAMING ResponseType = 2
	ResponseType_RESPONSE_TYPE_ERROR     ResponseType = 3
	ResponseType_RESPONSE_TYPE_SYSTEM    ResponseType = 4
)

// Enum value maps for ResponseType.
var (
	ResponseType_name = map[int32]string{
		0: "RESPONSE_TYPE_UNKNOWN",
		1: "RESPONSE_TYPE_TEXT",
		2: "RESPONSE_TYPE_STREAMING",
		3: "RESPONSE_TYPE_ERROR",
		4: "RESPONSE_TYPE_SYSTEM",
	}
	ResponseType_value = map[string]int32{
		"RESPONSE_TYPE_UNKNOWN":   0,
		"RESPONSE_TYPE_TEXT":      1,
		"RESPONSE_TYPE_STREAMING": 2,
		"RESPONSE_TYPE_ERROR":     3,
		"RESPONSE_TYPE_SYSTEM":    4,
	}
)

func (x ResponseType) Enum() *ResponseType {
	p := new(ResponseType)
	*p = x
	return p
}

func (x ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[3].Descriptor()
}

func (ResponseType) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[3]
}

func (x ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseType.Descriptor instead.
func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

// Chat session management
type CreateChatSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionName   string                 `protobuf:"bytes,2,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
	Settings      *ChatSettings          `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChatSessionRequest) Reset() {
	*x = CreateChatSessionRequest{}
	mi := &file_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChatSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatSessionRequest) ProtoMessage() {}

func (x *CreateChatSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateChatSessionRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChatSessionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateChatSessionRequest) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *CreateChatSessionRequest) GetSettings() *ChatSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateChatSessionRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateChatSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Session       *ChatSession           `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChatSessionResponse) Reset() {
	*x = CreateChatSessionResponse{}
	mi := &file_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChatSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatSessionResponse) ProtoMessage() {}

func (x *CreateChatSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateChatSessionResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *CreateChatSessionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateChatSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateChatSessionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateChatSessionResponse) GetSession() *ChatSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type UpdateChatSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Settings      *ChatSettings          `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChatSettingsRequest) Reset() {
	*x = UpdateChatSettingsRequest{}
	mi := &file_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChatSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChatSettingsRequest) ProtoMessage() {}

func (x *UpdateChatSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChatSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateChatSettingsRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateChatSettingsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UpdateChatSettingsRequest) GetSettings() *ChatSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateChatSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Session       *ChatSession           `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChatSettingsResponse) Reset() {
	*x = UpdateChatSettingsResponse{}
	mi := &file_chat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChatSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChatSettingsResponse) ProtoMessage() {}

func (x *UpdateChatSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChatSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateChatSettingsResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateChatSettingsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateChatSettingsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UpdateChatSettingsResponse) GetSession() *ChatSession {
	if x != nil {
		return x.Session
	}
	return nil
}

// Message handling
type SendMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	MessageType   MessageType            `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3,enum=aichat.MessageType" json:"message_type,omitempty"`
	Context       map[string]string      `protobuf:"bytes,5,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Language      string                 `protobuf:"bytes,6,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_chat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *SendMessageRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendMessageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendMessageRequest) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNKNOWN
}

func (x *SendMessageRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SendMessageRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type SendMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	MessageId     string                 `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	AiResponse    string                 `protobuf:"bytes,3,opt,name=ai_response,json=aiResponse,proto3" json:"ai_response,omitempty"`
	Sentiment     *SentimentAnalysis     `protobuf:"bytes,4,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	Metrics       *ProcessingMetrics     `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	ProcessedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_chat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *SendMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SendMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SendMessageResponse) GetAiResponse() string {
	if x != nil {
		return x.AiResponse
	}
	return ""
}

func (x *SendMessageResponse) GetSentiment() *SentimentAnalysis {
	if x != nil {
		return x.Sentiment
	}
	return nil
}

func (x *SendMessageResponse) GetMetrics() *ProcessingMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *SendMessageResponse) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

// Chat history
type GetChatHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatHistoryRequest) Reset() {
	*x = GetChatHistoryRequest{}
	mi := &file_chat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatHistoryRequest) ProtoMessage() {}

func (x *GetChatHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetChatHistoryRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (x *GetChatHistoryRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetChatHistoryRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetChatHistoryRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetChatHistoryRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetChatHistoryRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type GetChatHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*ChatMessage         `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	HasMore       bool                   `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatHistoryResponse) Reset() {
	*x = GetChatHistoryResponse{}
	mi := &file_chat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatHistoryResponse) ProtoMessage() {}

func (x *GetChatHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetChatHistoryResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *GetChatHistoryResponse) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetChatHistoryResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetChatHistoryResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// Sentiment analysis
type AnalyzeSentimentRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Text          string                    `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Language      string                    `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	Options       *SentimentAnalysisOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeSentimentRequest) Reset() {
	*x = AnalyzeSentimentRequest{}
	mi := &file_chat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeSentimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSentimentRequest) ProtoMessage() {}

func (x *AnalyzeSentimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSentimentRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeSentimentRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{8}
}

func (x *AnalyzeSentimentRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AnalyzeSentimentRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *AnalyzeSentimentRequest) GetOptions() *SentimentAnalysisOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type AnalyzeSentimentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sentiment     *SentimentAnalysis     `protobuf:"bytes,1,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	Confidence    *ConfidenceScores      `protobuf:"bytes,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Entities      []*SentimentEntity     `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	AnalyzedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=analyzed_at,json=analyzedAt,proto3" json:"analyzed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeSentimentResponse) Reset() {
	*x = AnalyzeSentimentResponse{}
	mi := &file_chat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeSentimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSentimentResponse) ProtoMessage() {}

func (x *AnalyzeSentimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSentimentResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeSentimentResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{9}
}

func (x *AnalyzeSentimentResponse) GetSentiment() *SentimentAnalysis {
	if x != nil {
		return x.Sentiment
	}
	return nil
}

func (x *AnalyzeSentimentResponse) GetConfidence() *ConfidenceScores {
	if x != nil {
		return x.Confidence
	}
	return nil
}

func (x *AnalyzeSentimentResponse) GetEntities() []*SentimentEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *AnalyzeSentimentResponse) GetAnalyzedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AnalyzedAt
	}
	return nil
}

// Health check
type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       string                 `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_chat_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{10}
}

func (x *HealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Metrics       *ServiceMetrics        `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_chat_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{11}
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthCheckResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HealthCheckResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HealthCheckResponse) GetMetrics() *ServiceMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Server streaming - Real-time chat
type StreamChatRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SessionId       string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InitialMessage  string                 `protobuf:"bytes,3,opt,name=initial_message,json=initialMessage,proto3" json:"initial_message,omitempty"`
	Settings        *ChatSettings          `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	EnableStreaming bool                   `protobuf:"varint,5,opt,name=enable_streaming,json=enableStreaming,proto3" json:"enable_streaming,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamChatRequest) Reset() {
	*x = StreamChatRequest{}
	mi := &file_chat_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatRequest) ProtoMessage() {}

func (x *StreamChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatRequest.ProtoReflect.Descriptor instead.
func (*StreamChatRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{12}
}

func (x *StreamChatRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamChatRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StreamChatRequest) GetInitialMessage() string {
	if x != nil {
		return x.InitialMessage
	}
	return ""
}

func (x *StreamChatRequest) GetSettings() *ChatSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *StreamChatRequest) GetEnableStreaming() bool {
	if x != nil {
		return x.EnableStreaming
	}
	return false
}

type ChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	MessageType   MessageType            `protobuf:"varint,5,opt,name=message_type,json=messageType,proto3,enum=aichat.MessageType" json:"message_type,omitempty"`
	Role          MessageRole            `protobuf:"varint,6,opt,name=role,proto3,enum=aichat.MessageRole" json:"role,omitempty"`
	Sentiment     *SentimentAnalysis     `protobuf:"bytes,7,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	Metrics       *ProcessingMetrics     `protobuf:"bytes,8,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsStreaming   bool                   `protobuf:"varint,11,opt,name=is_streaming,json=isStreaming,proto3" json:"is_streaming,omitempty"`
	StreamChunk   int32                  `protobuf:"varint,12,opt,name=stream_chunk,json=streamChunk,proto3" json:"stream_chunk,omitempty"`
	TotalChunks   int32                  `protobuf:"varint,13,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_chat_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{13}
}

func (x *ChatMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChatMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNKNOWN
}

func (x *ChatMessage) GetRole() MessageRole {
	if x != nil {
		return x.Role
	}
	return MessageRole_MESSAGE_ROLE_UNKNOWN
}

func (x *ChatMessage) GetSentiment() *SentimentAnalysis {
	if x != nil {
		return x.Sentiment
	}
	return nil
}

func (x *ChatMessage) GetMetrics() *ProcessingMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ChatMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ChatMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ChatMessage) GetIsStreaming() bool {
	if x != nil {
		return x.IsStreaming
	}
	return false
}

func (x *ChatMessage) GetStreamChunk() int32 {
	if x != nil {
		return x.StreamChunk
	}
	return 0
}

func (x *ChatMessage) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

// Client streaming - Bulk processing
type BulkMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	MessageType   MessageType            `protobuf:"varint,5,opt,name=message_type,json=messageType,proto3,enum=aichat.MessageType" json:"message_type,omitempty"`
	Context       map[string]string      `protobuf:"bytes,6,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulkMessageRequest) Reset() {
	*x = BulkMessageRequest{}
	mi := &file_chat_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMessageRequest) ProtoMessage() {}

func (x *BulkMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMessageRequest.ProtoReflect.Descriptor instead.
func (*BulkMessageRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{14}
}

func (x *BulkMessageRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BulkMessageRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BulkMessageRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BulkMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BulkMessageRequest) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNKNOWN
}

func (x *BulkMessageRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type BulkProcessResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BatchId            string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	TotalProcessed     int32                  `protobuf:"varint,2,opt,name=total_processed,json=totalProcessed,proto3" json:"total_processed,omitempty"`
	Successful         int32                  `protobuf:"varint,3,opt,name=successful,proto3" json:"successful,omitempty"`
	Failed             int32                  `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`
	Errors             []string               `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
	SuccessfulMessages []string               `protobuf:"bytes,6,rep,name=successful_messages,json=successfulMessages,proto3" json:"successful_messages,omitempty"`
	Summary            *ProcessingSummary     `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BulkProcessResponse) Reset() {
	*x = BulkProcessResponse{}
	mi := &file_chat_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulkProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkProcessResponse) ProtoMessage() {}

func (x *BulkProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkProcessResponse.ProtoReflect.Descriptor instead.
func (*BulkProcessResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{15}
}

func (x *BulkProcessResponse) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BulkProcessResponse) GetTotalProcessed() int32 {
	if x != nil {
		return x.TotalProcessed
	}
	return 0
}

func (x *BulkProcessResponse) GetSuccessful() int32 {
	if x != nil {
		return x.Successful
	}
	return 0
}

func (x *BulkProcessResponse) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *BulkProcessResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *BulkProcessResponse) GetSuccessfulMessages() []string {
	if x != nil {
		return x.SuccessfulMessages
	}
	return nil
}

func (x *BulkProcessResponse) GetSummary() *ProcessingSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Bidirectional streaming - Real-time conversation
type UserMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	MessageType   MessageType            `protobuf:"varint,4,opt,name=message_type,json=messageType,proto3,enum=aichat.MessageType" json:"message_type,omitempty"`
	Context       map[string]string      `protobuf:"bytes,5,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RequestId     string                 `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserMessage) Reset() {
	*x = UserMessage{}
	mi := &file_chat_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessage) ProtoMessage() {}

func (x *UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessage.ProtoReflect.Descriptor instead.
func (*UserMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{16}
}

func (x *UserMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UserMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserMessage) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNKNOWN
}

func (x *UserMessage) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UserMessage) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *UserMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type AIResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RequestId     string                 `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Response      string                 `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	ResponseType  ResponseType           `protobuf:"varint,4,opt,name=response_type,json=responseType,proto3,enum=aichat.ResponseType" json:"response_type,omitempty"`
	Sentiment     *SentimentAnalysis     `protobuf:"bytes,5,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	Metrics       *ProcessingMetrics     `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsFinal       bool                   `protobuf:"varint,9,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	ChunkNumber   int32                  `protobuf:"varint,10,opt,name=chunk_number,json=chunkNumber,proto3" json:"chunk_number,omitempty"`
	TotalChunks   int32                  `protobuf:"varint,11,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIResponse) Reset() {
	*x = AIResponse{}
	mi := &file_chat_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIResponse) ProtoMessage() {}

func (x *AIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIResponse.ProtoReflect.Descriptor instead.
func (*AIResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{17}
}

func (x *AIResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AIResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AIResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

func (x *AIResponse) GetResponseType() ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return ResponseType_RESPONSE_TYPE_UNKNOWN
}

func (x *AIResponse) GetSentiment() *SentimentAnalysis {
	if x != nil {
		return x.Sentiment
	}
	return nil
}

func (x *AIResponse) GetMetrics() *ProcessingMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AIResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AIResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AIResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *AIResponse) GetChunkNumber() int32 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *AIResponse) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

// Data structures
type ChatSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Settings      *ChatSettings          `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	Status        SessionStatus          `protobuf:"varint,5,opt,name=status,proto3,enum=aichat.SessionStatus" json:"status,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastActivity  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MessageCount  int32                  `protobuf:"varint,10,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatSession) Reset() {
	*x = ChatSession{}
	mi := &file_chat_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSession) ProtoMessage() {}

func (x *ChatSession) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSession.ProtoReflect.Descriptor instead.
func (*ChatSession) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{18}
}

func (x *ChatSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatSession) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChatSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatSession) GetSettings() *ChatSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ChatSession) GetStatus() SessionStatus {
	if x != nil {
		return x.Status
	}
	return SessionStatus_SESSION_STATUS_UNKNOWN
}

func (x *ChatSession) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChatSession) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ChatSession) GetLastActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivity
	}
	return nil
}

func (x *ChatSession) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ChatSession) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

type ChatSettings struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Model                   string                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"` // "gpt-4", "claude-3", "llama-2"
	Temperature             float64                `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	MaxTokens               int32                  `protobuf:"varint,3,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	TopP                    float64                `protobuf:"fixed64,4,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	FrequencyPenalty        float64                `protobuf:"fixed64,5,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	PresencePenalty         float64                `protobuf:"fixed64,6,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	Language                string                 `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	EnableStreaming         bool                   `protobuf:"varint,8,opt,name=enable_streaming,json=enableStreaming,proto3" json:"enable_streaming,omitempty"`
	EnableSentimentAnalysis bool                   `protobuf:"varint,9,opt,name=enable_sentiment_analysis,json=enableSentimentAnalysis,proto3" json:"enable_sentiment_analysis,omitempty"`
	SystemPrompts           []string               `protobuf:"bytes,10,rep,name=system_prompts,json=systemPrompts,proto3" json:"system_prompts,omitempty"`
	CustomSettings          map[string]string      `protobuf:"bytes,11,rep,name=custom_settings,json=customSettings,proto3" json:"custom_settings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ChatSettings) Reset() {
	*x = ChatSettings{}
	mi := &file_chat_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSettings) ProtoMessage() {}

func (x *ChatSettings) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSettings.ProtoReflect.Descriptor instead.
func (*ChatSettings) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{19}
}

func (x *ChatSettings) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatSettings) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ChatSettings) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *ChatSettings) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *ChatSettings) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *ChatSettings) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *ChatSettings) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ChatSettings) GetEnableStreaming() bool {
	if x != nil {
		return x.EnableStreaming
	}
	return false
}

func (x *ChatSettings) GetEnableSentimentAnalysis() bool {
	if x != nil {
		return x.EnableSentimentAnalysis
	}
	return false
}

func (x *ChatSettings) GetSystemPrompts() []string {
	if x != nil {
		return x.SystemPrompts
	}
	return nil
}

func (x *ChatSettings) GetCustomSettings() map[string]string {
	if x != nil {
		return x.CustomSettings
	}
	return nil
}

type SentimentAnalysis struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OverallSentiment string                 `protobuf:"bytes,1,opt,name=overall_sentiment,json=overallSentiment,proto3" json:"overall_sentiment,omitempty"` // "positive", "negative", "neutral", "mixed"
	PositiveScore    float64                `protobuf:"fixed64,2,opt,name=positive_score,json=positiveScore,proto3" json:"positive_score,omitempty"`
	NegativeScore    float64                `protobuf:"fixed64,3,opt,name=negative_score,json=negativeScore,proto3" json:"negative_score,omitempty"`
	NeutralScore     float64                `protobuf:"fixed64,4,opt,name=neutral_score,json=neutralScore,proto3" json:"neutral_score,omitempty"`
	MixedScore       float64                `protobuf:"fixed64,5,opt,name=mixed_score,json=mixedScore,proto3" json:"mixed_score,omitempty"`
	Entities         []*SentimentEntity     `protobuf:"bytes,6,rep,name=entities,proto3" json:"entities,omitempty"`
	Language         string                 `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`
	AnalyzedAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=analyzed_at,json=analyzedAt,proto3" json:"analyzed_at,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SentimentAnalysis) Reset() {
	*x = SentimentAnalysis{}
	mi := &file_chat_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentAnalysis) ProtoMessage() {}

func (x *SentimentAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentAnalysis.ProtoReflect.Descriptor instead.
func (*SentimentAnalysis) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{20}
}

func (x *SentimentAnalysis) GetOverallSentiment() string {
	if x != nil {
		return x.OverallSentiment
	}
	return ""
}

func (x *SentimentAnalysis) GetPositiveScore() float64 {
	if x != nil {
		return x.PositiveScore
	}
	return 0
}

func (x *SentimentAnalysis) GetNegativeScore() float64 {
	if x != nil {
		return x.NegativeScore
	}
	return 0
}

func (x *SentimentAnalysis) GetNeutralScore() float64 {
	if x != nil {
		return x.NeutralScore
	}
	return 0
}

func (x *SentimentAnalysis) GetMixedScore() float64 {
	if x != nil {
		return x.MixedScore
	}
	return 0
}

func (x *SentimentAnalysis) GetEntities() []*SentimentEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *SentimentAnalysis) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SentimentAnalysis) GetAnalyzedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AnalyzedAt
	}
	return nil
}

type SentimentEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Sentiment     string                 `protobuf:"bytes,2,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	Score         float64                `protobuf:"fixed64,3,opt,name=score,proto3" json:"score,omitempty"`
	EntityType    string                 `protobuf:"bytes,4,opt,name=entity_type,json=entityType,proto3" json:"entity_type,omitempty"`
	StartOffset   int32                  `protobuf:"varint,5,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset     int32                  `protobuf:"varint,6,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentimentEntity) Reset() {
	*x = SentimentEntity{}
	mi := &file_chat_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentEntity) ProtoMessage() {}

func (x *SentimentEntity) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentEntity.ProtoReflect.Descriptor instead.
func (*SentimentEntity) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{21}
}

func (x *SentimentEntity) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SentimentEntity) GetSentiment() string {
	if x != nil {
		return x.Sentiment
	}
	return ""
}

func (x *SentimentEntity) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SentimentEntity) GetEntityType() string {
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *SentimentEntity) GetStartOffset() int32 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *SentimentEntity) GetEndOffset() int32 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

type SentimentAnalysisOptions struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IncludeEntities   bool                   `protobuf:"varint,1,opt,name=include_entities,json=includeEntities,proto3" json:"include_entities,omitempty"`
	IncludeConfidence bool                   `protobuf:"varint,2,opt,name=include_confidence,json=includeConfidence,proto3" json:"include_confidence,omitempty"`
	LanguageHint      string                 `protobuf:"bytes,3,opt,name=language_hint,json=languageHint,proto3" json:"language_hint,omitempty"`
	EntityTypes       []string               `protobuf:"bytes,4,rep,name=entity_types,json=entityTypes,proto3" json:"entity_types,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SentimentAnalysisOptions) Reset() {
	*x = SentimentAnalysisOptions{}
	mi := &file_chat_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentAnalysisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentAnalysisOptions) ProtoMessage() {}

func (x *SentimentAnalysisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentAnalysisOptions.ProtoReflect.Descriptor instead.
func (*SentimentAnalysisOptions) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{22}
}

func (x *SentimentAnalysisOptions) GetIncludeEntities() bool {
	if x != nil {
		return x.IncludeEntities
	}
	return false
}

func (x *SentimentAnalysisOptions) GetIncludeConfidence() bool {
	if x != nil {
		return x.IncludeConfidence
	}
	return false
}

func (x *SentimentAnalysisOptions) GetLanguageHint() string {
	if x != nil {
		return x.LanguageHint
	}
	return ""
}

func (x *SentimentAnalysisOptions) GetEntityTypes() []string {
	if x != nil {
		return x.EntityTypes
	}
	return nil
}

type ConfidenceScores struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	OverallConfidence  float64                `protobuf:"fixed64,1,opt,name=overall_confidence,json=overallConfidence,proto3" json:"overall_confidence,omitempty"`
	PositiveConfidence float64                `protobuf:"fixed64,2,opt,name=positive_confidence,json=positiveConfidence,proto3" json:"positive_confidence,omitempty"`
	NegativeConfidence float64                `protobuf:"fixed64,3,opt,name=negative_confidence,json=negativeConfidence,proto3" json:"negative_confidence,omitempty"`
	NeutralConfidence  float64                `protobuf:"fixed64,4,opt,name=neutral_confidence,json=neutralConfidence,proto3" json:"neutral_confidence,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ConfidenceScores) Reset() {
	*x = ConfidenceScores{}
	mi := &file_chat_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfidenceScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidenceScores) ProtoMessage() {}

func (x *ConfidenceScores) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidenceScores.ProtoReflect.Descriptor instead.
func (*ConfidenceScores) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{23}
}

func (x *ConfidenceScores) GetOverallConfidence() float64 {
	if x != nil {
		return x.OverallConfidence
	}
	return 0
}

func (x *ConfidenceScores) GetPositiveConfidence() float64 {
	if x != nil {
		return x.PositiveConfidence
	}
	return 0
}

func (x *ConfidenceScores) GetNegativeConfidence() float64 {
	if x != nil {
		return x.NegativeConfidence
	}
	return 0
}

func (x *ConfidenceScores) GetNeutralConfidence() float64 {
	if x != nil {
		return x.NeutralConfidence
	}
	return 0
}

type ProcessingMetrics struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ResponseTimeMs  float64                `protobuf:"fixed64,1,opt,name=response_time_ms,json=responseTimeMs,proto3" json:"response_time_ms,omitempty"`
	TokensUsed      int32                  `protobuf:"varint,2,opt,name=tokens_used,json=tokensUsed,proto3" json:"tokens_used,omitempty"`
	TokensGenerated int32                  `protobuf:"varint,3,opt,name=tokens_generated,json=tokensGenerated,proto3" json:"tokens_generated,omitempty"`
	CostUsd         float64                `protobuf:"fixed64,4,opt,name=cost_usd,json=costUsd,proto3" json:"cost_usd,omitempty"`
	ModelUsed       string                 `protobuf:"bytes,5,opt,name=model_used,json=modelUsed,proto3" json:"model_used,omitempty"`
	CustomMetrics   map[string]float64     `protobuf:"bytes,6,rep,name=custom_metrics,json=customMetrics,proto3" json:"custom_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProcessingMetrics) Reset() {
	*x = ProcessingMetrics{}
	mi := &file_chat_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingMetrics) ProtoMessage() {}

func (x *ProcessingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingMetrics.ProtoReflect.Descriptor instead.
func (*ProcessingMetrics) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{24}
}

func (x *ProcessingMetrics) GetResponseTimeMs() float64 {
	if x != nil {
		return x.ResponseTimeMs
	}
	return 0
}

func (x *ProcessingMetrics) GetTokensUsed() int32 {
	if x != nil {
		return x.TokensUsed
	}
	return 0
}

func (x *ProcessingMetrics) GetTokensGenerated() int32 {
	if x != nil {
		return x.TokensGenerated
	}
	return 0
}

func (x *ProcessingMetrics) GetCostUsd() float64 {
	if x != nil {
		return x.CostUsd
	}
	return 0
}

func (x *ProcessingMetrics) GetModelUsed() string {
	if x != nil {
		return x.ModelUsed
	}
	return ""
}

func (x *ProcessingMetrics) GetCustomMetrics() map[string]float64 {
	if x != nil {
		return x.CustomMetrics
	}
	return nil
}

type ProcessingSummary struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AverageResponseTime   float64                `protobuf:"fixed64,1,opt,name=average_response_time,json=averageResponseTime,proto3" json:"average_response_time,omitempty"`
	TotalTokensUsed       int32                  `protobuf:"varint,2,opt,name=total_tokens_used,json=totalTokensUsed,proto3" json:"total_tokens_used,omitempty"`
	TotalCostUsd          float64                `protobuf:"fixed64,3,opt,name=total_cost_usd,json=totalCostUsd,proto3" json:"total_cost_usd,omitempty"`
	ModelUsage            map[string]int32       `protobuf:"bytes,4,rep,name=model_usage,json=modelUsage,proto3" json:"model_usage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SentimentDistribution *SentimentDistribution `protobuf:"bytes,5,opt,name=sentiment_distribution,json=sentimentDistribution,proto3" json:"sentiment_distribution,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProcessingSummary) Reset() {
	*x = ProcessingSummary{}
	mi := &file_chat_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessingSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingSummary) ProtoMessage() {}

func (x *ProcessingSummary) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingSummary.ProtoReflect.Descriptor instead.
func (*ProcessingSummary) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{25}
}

func (x *ProcessingSummary) GetAverageResponseTime() float64 {
	if x != nil {
		return x.AverageResponseTime
	}
	return 0
}

func (x *ProcessingSummary) GetTotalTokensUsed() int32 {
	if x != nil {
		return x.TotalTokensUsed
	}
	return 0
}

func (x *ProcessingSummary) GetTotalCostUsd() float64 {
	if x != nil {
		return x.TotalCostUsd
	}
	return 0
}

func (x *ProcessingSummary) GetModelUsage() map[string]int32 {
	if x != nil {
		return x.ModelUsage
	}
	return nil
}

func (x *ProcessingSummary) GetSentimentDistribution() *SentimentDistribution {
	if x != nil {
		return x.SentimentDistribution
	}
	return nil
}

type SentimentDistribution struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PositiveCount int32                  `protobuf:"varint,1,opt,name=positive_count,json=positiveCount,proto3" json:"positive_count,omitempty"`
	NegativeCount int32                  `protobuf:"varint,2,opt,name=negative_count,json=negativeCount,proto3" json:"negative_count,omitempty"`
	NeutralCount  int32                  `protobuf:"varint,3,opt,name=neutral_count,json=neutralCount,proto3" json:"neutral_count,omitempty"`
	MixedCount    int32                  `protobuf:"varint,4,opt,name=mixed_count,json=mixedCount,proto3" json:"mixed_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentimentDistribution) Reset() {
	*x = SentimentDistribution{}
	mi := &file_chat_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentDistribution) ProtoMessage() {}

func (x *SentimentDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentDistribution.ProtoReflect.Descriptor instead.
func (*SentimentDistribution) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{26}
}

func (x *SentimentDistribution) GetPositiveCount() int32 {
	if x != nil {
		return x.PositiveCount
	}
	return 0
}

func (x *SentimentDistribution) GetNegativeCount() int32 {
	if x != nil {
		return x.NegativeCount
	}
	return 0
}

func (x *SentimentDistribution) GetNeutralCount() int32 {
	if x != nil {
		return x.NeutralCount
	}
	return 0
}

func (x *SentimentDistribution) GetMixedCount() int32 {
	if x != nil {
		return x.MixedCount
	}
	return 0
}

type ServiceMetrics struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ActiveSessions         int32                  `protobuf:"varint,1,opt,name=active_sessions,json=activeSessions,proto3" json:"active_sessions,omitempty"`
	TotalMessagesProcessed int32                  `protobuf:"varint,2,opt,name=total_messages_processed,json=totalMessagesProcessed,proto3" json:"total_messages_processed,omitempty"`
	AverageResponseTime    float64                `protobuf:"fixed64,3,opt,name=average_response_time,json=averageResponseTime,proto3" json:"average_response_time,omitempty"`
	UptimePercentage       float64                `protobuf:"fixed64,4,opt,name=uptime_percentage,json=uptimePercentage,proto3" json:"uptime_percentage,omitempty"`
	ModelUsage             map[string]int32       `protobuf:"bytes,5,rep,name=model_usage,json=modelUsage,proto3" json:"model_usage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ServiceMetrics) Reset() {
	*x = ServiceMetrics{}
	mi := &file_chat_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMetrics) ProtoMessage() {}

func (x *ServiceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMetrics.ProtoReflect.Descriptor instead.
func (*ServiceMetrics) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{27}
}

func (x *ServiceMetrics) GetActiveSessions() int32 {
	if x != nil {
		return x.ActiveSessions
	}
	return 0
}

func (x *ServiceMetrics) GetTotalMessagesProcessed() int32 {
	if x != nil {
		return x.TotalMessagesProcessed
	}
	return 0
}

func (x *ServiceMetrics) GetAverageResponseTime() float64 {
	if x != nil {
		return x.AverageResponseTime
	}
	return 0
}

func (x *ServiceMetrics) GetUptimePercentage() float64 {
	if x != nil {
		return x.UptimePercentage
	}
	return 0
}

func (x *ServiceMetrics) GetModelUsage() map[string]int32 {
	if x != nil {
		return x.ModelUsage
	}
	return nil
}

var File_chat_proto protoreflect.FileDescriptor

const file_chat_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"chat.proto\x12\x06aichat\x1a\x1fgoogle/protobuf/timestamp.proto\"\x91\x02\n" +
	"\x18CreateChatSessionRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12!\n" +
	"\fsession_name\x18\x02 \x01(\tR\vsessionName\x120\n" +
	"\bsettings\x18\x03 \x01(\v2\x14.aichat.ChatSettingsR\bsettings\x12J\n" +
	"\bmetadata\x18\x04 \x03(\v2..aichat.CreateChatSessionRequest.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9d\x01\n" +
	"\x19CreateChatSessionResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12-\n" +
	"\asession\x18\x04 \x01(\v2\x13.aichat.ChatSessionR\asession\"l\n" +
	"\x19UpdateChatSettingsRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x120\n" +
	"\bsettings\x18\x02 \x01(\v2\x14.aichat.ChatSettingsR\bsettings\"\x7f\n" +
	"\x1aUpdateChatSettingsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12-\n" +
	"\asession\x18\x03 \x01(\v2\x13.aichat.ChatSessionR\asession\"\xb9\x02\n" +
	"\x12SendMessageRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x126\n" +
	"\fmessage_type\x18\x04 \x01(\x0e2\x13.aichat.MessageTypeR\vmessageType\x12A\n" +
	"\acontext\x18\x05 \x03(\v2'.aichat.SendMessageRequest.ContextEntryR\acontext\x12\x1a\n" +
	"\blanguage\x18\x06 \x01(\tR\blanguage\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9c\x02\n" +
	"\x13SendMessageResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1d\n" +
	"\n" +
	"message_id\x18\x02 \x01(\tR\tmessageId\x12\x1f\n" +
	"\vai_response\x18\x03 \x01(\tR\n" +
	"aiResponse\x127\n" +
	"\tsentiment\x18\x04 \x01(\v2\x19.aichat.SentimentAnalysisR\tsentiment\x123\n" +
	"\ametrics\x18\x05 \x01(\v2\x19.aichat.ProcessingMetricsR\ametrics\x12=\n" +
	"\fprocessed_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\vprocessedAt\"\xd6\x01\n" +
	"\x15GetChatHistoryRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x05R\x06offset\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\"\x85\x01\n" +
	"\x16GetChatHistoryResponse\x12/\n" +
	"\bmessages\x18\x01 \x03(\v2\x13.aichat.ChatMessageR\bmessages\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x19\n" +
	"\bhas_more\x18\x03 \x01(\bR\ahasMore\"\x85\x01\n" +
	"\x17AnalyzeSentimentRequest\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x1a\n" +
	"\blanguage\x18\x02 \x01(\tR\blanguage\x12:\n" +
	"\aoptions\x18\x03 \x01(\v2 .aichat.SentimentAnalysisOptionsR\aoptions\"\xff\x01\n" +
	"\x18AnalyzeSentimentResponse\x127\n" +
	"\tsentiment\x18\x01 \x01(\v2\x19.aichat.SentimentAnalysisR\tsentiment\x128\n" +
	"\n" +
	"confidence\x18\x02 \x01(\v2\x18.aichat.ConfidenceScoresR\n" +
	"confidence\x123\n" +
	"\bentities\x18\x03 \x03(\v2\x17.aichat.SentimentEntityR\bentities\x12;\n" +
	"\vanalyzed_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"analyzedAt\".\n" +
	"\x12HealthCheckRequest\x12\x18\n" +
	"\aservice\x18\x01 \x01(\tR\aservice\"\xb7\x02\n" +
	"\x13HealthCheckResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12E\n" +
	"\bmetadata\x18\x04 \x03(\v2).aichat.HealthCheckResponse.MetadataEntryR\bmetadata\x120\n" +
	"\ametrics\x18\x05 \x01(\v2\x16.aichat.ServiceMetricsR\ametrics\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd1\x01\n" +
	"\x11StreamChatRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12'\n" +
	"\x0finitial_message\x18\x03 \x01(\tR\x0einitialMessage\x120\n" +
	"\bsettings\x18\x04 \x01(\v2\x14.aichat.ChatSettingsR\bsettings\x12)\n" +
	"\x10enable_streaming\x18\x05 \x01(\bR\x0fenableStreaming\"\xec\x04\n" +
	"\vChatMessage\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x126\n" +
	"\fmessage_type\x18\x05 \x01(\x0e2\x13.aichat.MessageTypeR\vmessageType\x12'\n" +
	"\x04role\x18\x06 \x01(\x0e2\x13.aichat.MessageRoleR\x04role\x127\n" +
	"\tsentiment\x18\a \x01(\v2\x19.aichat.SentimentAnalysisR\tsentiment\x123\n" +
	"\ametrics\x18\b \x01(\v2\x19.aichat.ProcessingMetricsR\ametrics\x128\n" +
	"\ttimestamp\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12=\n" +
	"\bmetadata\x18\n" +
	" \x03(\v2!.aichat.ChatMessage.MetadataEntryR\bmetadata\x12!\n" +
	"\fis_streaming\x18\v \x01(\bR\visStreaming\x12!\n" +
	"\fstream_chunk\x18\f \x01(\x05R\vstreamChunk\x12!\n" +
	"\ftotal_chunks\x18\r \x01(\x05R\vtotalChunks\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb8\x02\n" +
	"\x12BulkMessageRequest\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x126\n" +
	"\fmessage_type\x18\x05 \x01(\x0e2\x13.aichat.MessageTypeR\vmessageType\x12A\n" +
	"\acontext\x18\x06 \x03(\v2'.aichat.BulkMessageRequest.ContextEntryR\acontext\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8f\x02\n" +
	"\x13BulkProcessResponse\x12\x19\n" +
	"\bbatch_id\x18\x01 \x01(\tR\abatchId\x12'\n" +
	"\x0ftotal_processed\x18\x02 \x01(\x05R\x0etotalProcessed\x12\x1e\n" +
	"\n" +
	"successful\x18\x03 \x01(\x05R\n" +
	"successful\x12\x16\n" +
	"\x06failed\x18\x04 \x01(\x05R\x06failed\x12\x16\n" +
	"\x06errors\x18\x05 \x03(\tR\x06errors\x12/\n" +
	"\x13successful_messages\x18\x06 \x03(\tR\x12successfulMessages\x123\n" +
	"\asummary\x18\a \x01(\v2\x19.aichat.ProcessingSummaryR\asummary\"\xe8\x02\n" +
	"\vUserMessage\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x126\n" +
	"\fmessage_type\x18\x04 \x01(\x0e2\x13.aichat.MessageTypeR\vmessageType\x12:\n" +
	"\acontext\x18\x05 \x03(\v2 .aichat.UserMessage.ContextEntryR\acontext\x12\x1d\n" +
	"\n" +
	"request_id\x18\x06 \x01(\tR\trequestId\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x1a:\n" +
	"\fContextEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa5\x04\n" +
	"\n" +
	"AIResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12\x1d\n" +
	"\n" +
	"request_id\x18\x02 \x01(\tR\trequestId\x12\x1a\n" +
	"\bresponse\x18\x03 \x01(\tR\bresponse\x129\n" +
	"\rresponse_type\x18\x04 \x01(\x0e2\x14.aichat.ResponseTypeR\fresponseType\x127\n" +
	"\tsentiment\x18\x05 \x01(\v2\x19.aichat.SentimentAnalysisR\tsentiment\x123\n" +
	"\ametrics\x18\x06 \x01(\v2\x19.aichat.ProcessingMetricsR\ametrics\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12<\n" +
	"\bmetadata\x18\b \x03(\v2 .aichat.AIResponse.MetadataEntryR\bmetadata\x12\x19\n" +
	"\bis_final\x18\t \x01(\bR\aisFinal\x12!\n" +
	"\fchunk_number\x18\n" +
	" \x01(\x05R\vchunkNumber\x12!\n" +
	"\ftotal_chunks\x18\v \x01(\x05R\vtotalChunks\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x83\x04\n" +
	"\vChatSession\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x120\n" +
	"\bsettings\x18\x04 \x01(\v2\x14.aichat.ChatSettingsR\bsettings\x12-\n" +
	"\x06status\x18\x05 \x01(\x0e2\x15.aichat.SessionStatusR\x06status\x129\n" +
	"\n" +
	"created_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12?\n" +
	"\rlast_activity\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\flastActivity\x12=\n" +
	"\bmetadata\x18\t \x03(\v2!.aichat.ChatSession.MetadataEntryR\bmetadata\x12#\n" +
	"\rmessage_count\x18\n" +
	" \x01(\x05R\fmessageCount\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x92\x04\n" +
	"\fChatSettings\x12\x14\n" +
	"\x05model\x18\x01 \x01(\tR\x05model\x12 \n" +
	"\vtemperature\x18\x02 \x01(\x01R\vtemperature\x12\x1d\n" +
	"\n" +
	"max_tokens\x18\x03 \x01(\x05R\tmaxTokens\x12\x13\n" +
	"\x05top_p\x18\x04 \x01(\x01R\x04topP\x12+\n" +
	"\x11frequency_penalty\x18\x05 \x01(\x01R\x10frequencyPenalty\x12)\n" +
	"\x10presence_penalty\x18\x06 \x01(\x01R\x0fpresencePenalty\x12\x1a\n" +
	"\blanguage\x18\a \x01(\tR\blanguage\x12)\n" +
	"\x10enable_streaming\x18\b \x01(\bR\x0fenableStreaming\x12:\n" +
	"\x19enable_sentiment_analysis\x18\t \x01(\bR\x17enableSentimentAnalysis\x12%\n" +
	"\x0esystem_prompts\x18\n" +
	" \x03(\tR\rsystemPrompts\x12Q\n" +
	"\x0fcustom_settings\x18\v \x03(\v2(.aichat.ChatSettings.CustomSettingsEntryR\x0ecustomSettings\x1aA\n" +
	"\x13CustomSettingsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe2\x02\n" +
	"\x11SentimentAnalysis\x12+\n" +
	"\x11overall_sentiment\x18\x01 \x01(\tR\x10overallSentiment\x12%\n" +
	"\x0epositive_score\x18\x02 \x01(\x01R\rpositiveScore\x12%\n" +
	"\x0enegative_score\x18\x03 \x01(\x01R\rnegativeScore\x12#\n" +
	"\rneutral_score\x18\x04 \x01(\x01R\fneutralScore\x12\x1f\n" +
	"\vmixed_score\x18\x05 \x01(\x01R\n" +
	"mixedScore\x123\n" +
	"\bentities\x18\x06 \x03(\v2\x17.aichat.SentimentEntityR\bentities\x12\x1a\n" +
	"\blanguage\x18\a \x01(\tR\blanguage\x12;\n" +
	"\vanalyzed_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"analyzedAt\"\xbc\x01\n" +
	"\x0fSentimentEntity\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x1c\n" +
	"\tsentiment\x18\x02 \x01(\tR\tsentiment\x12\x14\n" +
	"\x05score\x18\x03 \x01(\x01R\x05score\x12\x1f\n" +
	"\ventity_type\x18\x04 \x01(\tR\n" +
	"entityType\x12!\n" +
	"\fstart_offset\x18\x05 \x01(\x05R\vstartOffset\x12\x1d\n" +
	"\n" +
	"end_offset\x18\x06 \x01(\x05R\tendOffset\"\xbc\x01\n" +
	"\x18SentimentAnalysisOptions\x12)\n" +
	"\x10include_entities\x18\x01 \x01(\bR\x0fincludeEntities\x12-\n" +
	"\x12include_confidence\x18\x02 \x01(\bR\x11includeConfidence\x12#\n" +
	"\rlanguage_hint\x18\x03 \x01(\tR\flanguageHint\x12!\n" +
	"\fentity_types\x18\x04 \x03(\tR\ventityTypes\"\xd2\x01\n" +
	"\x10ConfidenceScores\x12-\n" +
	"\x12overall_confidence\x18\x01 \x01(\x01R\x11overallConfidence\x12/\n" +
	"\x13positive_confidence\x18\x02 \x01(\x01R\x12positiveConfidence\x12/\n" +
	"\x13negative_confidence\x18\x03 \x01(\x01R\x12negativeConfidence\x12-\n" +
	"\x12neutral_confidence\x18\x04 \x01(\x01R\x11neutralConfidence\"\xda\x02\n" +
	"\x11ProcessingMetrics\x12(\n" +
	"\x10response_time_ms\x18\x01 \x01(\x01R\x0eresponseTimeMs\x12\x1f\n" +
	"\vtokens_used\x18\x02 \x01(\x05R\n" +
	"tokensUsed\x12)\n" +
	"\x10tokens_generated\x18\x03 \x01(\x05R\x0ftokensGenerated\x12\x19\n" +
	"\bcost_usd\x18\x04 \x01(\x01R\acostUsd\x12\x1d\n" +
	"\n" +
	"model_used\x18\x05 \x01(\tR\tmodelUsed\x12S\n" +
	"\x0ecustom_metrics\x18\x06 \x03(\v2,.aichat.ProcessingMetrics.CustomMetricsEntryR\rcustomMetrics\x1a@\n" +
	"\x12CustomMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"\xfa\x02\n" +
	"\x11ProcessingSummary\x122\n" +
	"\x15average_response_time\x18\x01 \x01(\x01R\x13averageResponseTime\x12*\n" +
	"\x11total_tokens_used\x18\x02 \x01(\x05R\x0ftotalTokensUsed\x12$\n" +
	"\x0etotal_cost_usd\x18\x03 \x01(\x01R\ftotalCostUsd\x12J\n" +
	"\vmodel_usage\x18\x04 \x03(\v2).aichat.ProcessingSummary.ModelUsageEntryR\n" +
	"modelUsage\x12T\n" +
	"\x16sentiment_distribution\x18\x05 \x01(\v2\x1d.aichat.SentimentDistributionR\x15sentimentDistribution\x1a=\n" +
	"\x0fModelUsageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xab\x01\n" +
	"\x15SentimentDistribution\x12%\n" +
	"\x0epositive_count\x18\x01 \x01(\x05R\rpositiveCount\x12%\n" +
	"\x0enegative_count\x18\x02 \x01(\x05R\rnegativeCount\x12#\n" +
	"\rneutral_count\x18\x03 \x01(\x05R\fneutralCount\x12\x1f\n" +
	"\vmixed_count\x18\x04 \x01(\x05R\n" +
	"mixedCount\"\xdc\x02\n" +
	"\x0eServiceMetrics\x12'\n" +
	"\x0factive_sessions\x18\x01 \x01(\x05R\x0eactiveSessions\x128\n" +
	"\x18total_messages_processed\x18\x02 \x01(\x05R\x16totalMessagesProcessed\x122\n" +
	"\x15average_response_time\x18\x03 \x01(\x01R\x13averageResponseTime\x12+\n" +
	"\x11uptime_percentage\x18\x04 \x01(\x01R\x10uptimePercentage\x12G\n" +
	"\vmodel_usage\x18\x05 \x03(\v2&.aichat.ServiceMetrics.ModelUsageEntryR\n" +
	"modelUsage\x1a=\n" +
	"\x0fModelUsageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01*\x9f\x01\n" +
	"\vMessageType\x12\x18\n" +
	"\x14MESSAGE_TYPE_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11MESSAGE_TYPE_TEXT\x10\x01\x12\x16\n" +
	"\x12MESSAGE_TYPE_IMAGE\x10\x02\x12\x16\n" +
	"\x12MESSAGE_TYPE_AUDIO\x10\x03\x12\x15\n" +
	"\x11MESSAGE_TYPE_FILE\x10\x04\x12\x18\n" +
	"\x14MESSAGE_TYPE_COMMAND\x10\x05*s\n" +
	"\vMessageRole\x12\x18\n" +
	"\x14MESSAGE_ROLE_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11MESSAGE_ROLE_USER\x10\x01\x12\x1a\n" +
	"\x16MESSAGE_ROLE_ASSISTANT\x10\x02\x12\x17\n" +
	"\x13MESSAGE_ROLE_SYSTEM\x10\x03*\x9a\x01\n" +
	"\rSessionStatus\x12\x1a\n" +
	"\x16SESSION_STATUS_UNKNOWN\x10\x00\x12\x19\n" +
	"\x15SESSION_STATUS_ACTIVE\x10\x01\x12\x19\n" +
	"\x15SESSION_STATUS_PAUSED\x10\x02\x12\x1b\n" +
	"\x17SESSION_STATUS_ARCHIVED\x10\x03\x12\x1a\n" +
	"\x16SESSION_STATUS_DELETED\x10\x04*\x91\x01\n" +
	"\fResponseType\x12\x19\n" +
	"\x15RESPONSE_TYPE_UNKNOWN\x10\x00\x12\x16\n" +
	"\x12RESPONSE_TYPE_TEXT\x10\x01\x12\x1b\n" +
	"\x17RESPONSE_TYPE_STREAMING\x10\x02\x12\x17\n" +
	"\x13RESPONSE_TYPE_ERROR\x10\x03\x12\x18\n" +
	"\x14RESPONSE_TYPE_SYSTEM\x10\x042\xd1\x05\n" +
	"\rAIChatService\x12F\n" +
	"\vSendMessage\x12\x1a.aichat.SendMessageRequest\x1a\x1b.aichat.SendMessageResponse\x12O\n" +
	"\x0eGetChatHistory\x12\x1d.aichat.GetChatHistoryRequest\x1a\x1e.aichat.GetChatHistoryResponse\x12X\n" +
	"\x11CreateChatSession\x12 .aichat.CreateChatSessionRequest\x1a!.aichat.CreateChatSessionResponse\x12[\n" +
	"\x12UpdateChatSettings\x12!.aichat.UpdateChatSettingsRequest\x1a\".aichat.UpdateChatSettingsResponse\x12U\n" +
	"\x10AnalyzeSentiment\x12\x1f.aichat.AnalyzeSentimentRequest\x1a .aichat.AnalyzeSentimentResponse\x12F\n" +
	"\vHealthCheck\x12\x1a.aichat.HealthCheckRequest\x1a\x1b.aichat.HealthCheckResponse\x12>\n" +
	"\n" +
	"StreamChat\x12\x19.aichat.StreamChatRequest\x1a\x13.aichat.ChatMessage0\x01\x12P\n" +
	"\x13BulkProcessMessages\x12\x1a.aichat.BulkMessageRequest\x1a\x1b.aichat.BulkProcessResponse(\x01\x12?\n" +
	"\x10ChatConversation\x12\x13.aichat.UserMessage\x1a\x12.aichat.AIResponse(\x010\x01BTZRgithub.com/gripmock/grpctestify/examples/advanced-examples/ai-chat/server/aichatpbb\x06proto3"

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData []byte
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)))
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_chat_proto_goTypes = []any{
	(MessageType)(0),                   // 0: aichat.MessageType
	(MessageRole)(0),                   // 1: aichat.MessageRole
	(SessionStatus)(0),                 // 2: aichat.SessionStatus
	(ResponseType)(0),                  // 3: aichat.ResponseType
	(*CreateChatSessionRequest)(nil),   // 4: aichat.CreateChatSessionRequest
	(*CreateChatSessionResponse)(nil),  // 5: aichat.CreateChatSessionResponse
	(*UpdateChatSettingsRequest)(nil),  // 6: aichat.UpdateChatSettingsRequest
	(*UpdateChatSettingsResponse)(nil), // 7: aichat.UpdateChatSettingsResponse
	(*SendMessageRequest)(nil),         // 8: aichat.SendMessageRequest
	(*SendMessageResponse)(nil),        // 9: aichat.SendMessageResponse
	(*GetChatHistoryRequest)(nil),      // 10: aichat.GetChatHistoryRequest
	(*GetChatHistoryResponse)(nil),     // 11: aichat.GetChatHistoryResponse
	(*AnalyzeSentimentRequest)(nil),    // 12: aichat.AnalyzeSentimentRequest
	(*AnalyzeSentimentResponse)(nil),   // 13: aichat.AnalyzeSentimentResponse
	(*HealthCheckRequest)(nil),         // 14: aichat.HealthCheckRequest
	(*HealthCheckResponse)(nil),        // 15: aichat.HealthCheckResponse
	(*StreamChatRequest)(nil),          // 16: aichat.StreamChatRequest
	(*ChatMessage)(nil),                // 17: aichat.ChatMessage
	(*BulkMessageRequest)(nil),         // 18: aichat.BulkMessageRequest
	(*BulkProcessResponse)(nil),        // 19: aichat.BulkProcessResponse
	(*UserMessage)(nil),                // 20: aichat.UserMessage
	(*AIResponse)(nil),                 // 21: aichat.AIResponse
	(*ChatSession)(nil),                // 22: aichat.ChatSession
	(*ChatSettings)(nil),               // 23: aichat.ChatSettings
	(*SentimentAnalysis)(nil),          // 24: aichat.SentimentAnalysis
	(*SentimentEntity)(nil),            // 25: aichat.SentimentEntity
	(*SentimentAnalysisOptions)(nil),   // 26: aichat.SentimentAnalysisOptions
	(*ConfidenceScores)(nil),           // 27: aichat.ConfidenceScores
	(*ProcessingMetrics)(nil),          // 28: aichat.ProcessingMetrics
	(*ProcessingSummary)(nil),          // 29: aichat.ProcessingSummary
	(*SentimentDistribution)(nil),      // 30: aichat.SentimentDistribution
	(*ServiceMetrics)(nil),             // 31: aichat.ServiceMetrics
	nil,                                // 32: aichat.CreateChatSessionRequest.MetadataEntry
	nil,                                // 33: aichat.SendMessageRequest.ContextEntry
	nil,                                // 34: aichat.HealthCheckResponse.MetadataEntry
	nil,                                // 35: aichat.ChatMessage.MetadataEntry
	nil,                                // 36: aichat.BulkMessageRequest.ContextEntry
	nil,                                // 37: aichat.UserMessage.ContextEntry
	nil,                                // 38: aichat.AIResponse.MetadataEntry
	nil,                                // 39: aichat.ChatSession.MetadataEntry
	nil,                                // 40: aichat.ChatSettings.CustomSettingsEntry
	nil,                                // 41: aichat.ProcessingMetrics.CustomMetricsEntry
	nil,                                // 42: aichat.ProcessingSummary.ModelUsageEntry
	nil,                                // 43: aichat.ServiceMetrics.ModelUsageEntry
	(*timestamppb.Timestamp)(nil),      // 44: google.protobuf.Timestamp
}
var file_chat_proto_depIdxs = []int32{
	23, // 0: aichat.CreateChatSessionRequest.settings:type_name -> aichat.ChatSettings
	32, // 1: aichat.CreateChatSessionRequest.metadata:type_name -> aichat.CreateChatSessionRequest.MetadataEntry
	22, // 2: aichat.CreateChatSessionResponse.session:type_name -> aichat.ChatSession
	23, // 3: aichat.UpdateChatSettingsRequest.settings:type_name -> aichat.ChatSettings
	22, // 4: aichat.UpdateChatSettingsResponse.session:type_name -> aichat.ChatSession
	0,  // 5: aichat.SendMessageRequest.message_type:type_name -> aichat.MessageType
	33, // 6: aichat.SendMessageRequest.context:type_name -> aichat.SendMessageRequest.ContextEntry
	24, // 7: aichat.SendMessageResponse.sentiment:type_name -> aichat.SentimentAnalysis
	28, // 8: aichat.SendMessageResponse.metrics:type_name -> aichat.ProcessingMetrics
	44, // 9: aichat.SendMessageResponse.processed_at:type_name -> google.protobuf.Timestamp
	44, // 10: aichat.GetChatHistoryRequest.start_time:type_name -> google.protobuf.Timestamp
	44, // 11: aichat.GetChatHistoryRequest.end_time:type_name -> google.protobuf.Timestamp
	17, // 12: aichat.GetChatHistoryResponse.messages:type_name -> aichat.ChatMessage
	26, // 13: aichat.AnalyzeSentimentRequest.options:type_name -> aichat.SentimentAnalysisOptions
	24, // 14: aichat.AnalyzeSentimentResponse.sentiment:type_name -> aichat.SentimentAnalysis
	27, // 15: aichat.AnalyzeSentimentResponse.confidence:type_name -> aichat.ConfidenceScores
	25, // 16: aichat.AnalyzeSentimentResponse.entities:type_name -> aichat.SentimentEntity
	44, // 17: aichat.AnalyzeSentimentResponse.analyzed_at:type_name -> google.protobuf.Timestamp
	44, // 18: aichat.HealthCheckResponse.timestamp:type_name -> google.protobuf.Timestamp
	34, // 19: aichat.HealthCheckResponse.metadata:type_name -> aichat.HealthCheckResponse.MetadataEntry
	31, // 20: aichat.HealthCheckResponse.metrics:type_name -> aichat.ServiceMetrics
	23, // 21: aichat.StreamChatRequest.settings:type_name -> aichat.ChatSettings
	0,  // 22: aichat.ChatMessage.message_type:type_name -> aichat.MessageType
	1,  // 23: aichat.ChatMessage.role:type_name -> aichat.MessageRole
	24, // 24: aichat.ChatMessage.sentiment:type_name -> aichat.SentimentAnalysis
	28, // 25: aichat.ChatMessage.metrics:type_name -> aichat.ProcessingMetrics
	44, // 26: aichat.ChatMessage.timestamp:type_name -> google.protobuf.Timestamp
	35, // 27: aichat.ChatMessage.metadata:type_name -> aichat.ChatMessage.MetadataEntry
	0,  // 28: aichat.BulkMessageRequest.message_type:type_name -> aichat.MessageType
	36, // 29: aichat.BulkMessageRequest.context:type_name -> aichat.BulkMessageRequest.ContextEntry
	29, // 30: aichat.BulkProcessResponse.summary:type_name -> aichat.ProcessingSummary
	0,  // 31: aichat.UserMessage.message_type:type_name -> aichat.MessageType
	37, // 32: aichat.UserMessage.context:type_name -> aichat.UserMessage.ContextEntry
	44, // 33: aichat.UserMessage.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 34: aichat.AIResponse.response_type:type_name -> aichat.ResponseType
	24, // 35: aichat.AIResponse.sentiment:type_name -> aichat.SentimentAnalysis
	28, // 36: aichat.AIResponse.metrics:type_name -> aichat.ProcessingMetrics
	44, // 37: aichat.AIResponse.timestamp:type_name -> google.protobuf.Timestamp
	38, // 38: aichat.AIResponse.metadata:type_name -> aichat.AIResponse.MetadataEntry
	23, // 39: aichat.ChatSession.settings:type_name -> aichat.ChatSettings
	2,  // 40: aichat.ChatSession.status:type_name -> aichat.SessionStatus
	44, // 41: aichat.ChatSession.created_at:type_name -> google.protobuf.Timestamp
	44, // 42: aichat.ChatSession.updated_at:type_name -> google.protobuf.Timestamp
	44, // 43: aichat.ChatSession.last_activity:type_name -> google.protobuf.Timestamp
	39, // 44: aichat.ChatSession.metadata:type_name -> aichat.ChatSession.MetadataEntry
	40, // 45: aichat.ChatSettings.custom_settings:type_name -> aichat.ChatSettings.CustomSettingsEntry
	25, // 46: aichat.SentimentAnalysis.entities:type_name -> aichat.SentimentEntity
	44, // 47: aichat.SentimentAnalysis.analyzed_at:type_name -> google.protobuf.Timestamp
	41, // 48: aichat.ProcessingMetrics.custom_metrics:type_name -> aichat.ProcessingMetrics.CustomMetricsEntry
	42, // 49: aichat.ProcessingSummary.model_usage:type_name -> aichat.ProcessingSummary.ModelUsageEntry
	30, // 50: aichat.ProcessingSummary.sentiment_distribution:type_name -> aichat.SentimentDistribution
	43, // 51: aichat.ServiceMetrics.model_usage:type_name -> aichat.ServiceMetrics.ModelUsageEntry
	8,  // 52: aichat.AIChatService.SendMessage:input_type -> aichat.SendMessageRequest
	10, // 53: aichat.AIChatService.GetChatHistory:input_type -> aichat.GetChatHistoryRequest
	4,  // 54: aichat.AIChatService.CreateChatSession:input_type -> aichat.CreateChatSessionRequest
	6,  // 55: aichat.AIChatService.UpdateChatSettings:input_type -> aichat.UpdateChatSettingsRequest
	12, // 56: aichat.AIChatService.AnalyzeSentiment:input_type -> aichat.AnalyzeSentimentRequest
	14, // 57: aichat.AIChatService.HealthCheck:input_type -> aichat.HealthCheckRequest
	16, // 58: aichat.AIChatService.StreamChat:input_type -> aichat.StreamChatRequest
	18, // 59: aichat.AIChatService.BulkProcessMessages:input_type -> aichat.BulkMessageRequest
	20, // 60: aichat.AIChatService.ChatConversation:input_type -> aichat.UserMessage
	9,  // 61: aichat.AIChatService.SendMessage:output_type -> aichat.SendMessageResponse
	11, // 62: aichat.AIChatService.GetChatHistory:output_type -> aichat.GetChatHistoryResponse
	5,  // 63: aichat.AIChatService.CreateChatSession:output_type -> aichat.CreateChatSessionResponse
	7,  // 64: aichat.AIChatService.UpdateChatSettings:output_type -> aichat.UpdateChatSettingsResponse
	13, // 65: aichat.AIChatService.AnalyzeSentiment:output_type -> aichat.AnalyzeSentimentResponse
	15, // 66: aichat.AIChatService.HealthCheck:output_type -> aichat.HealthCheckResponse
	17, // 67: aichat.AIChatService.StreamChat:output_type -> aichat.ChatMessage
	19, // 68: aichat.AIChatService.BulkProcessMessages:output_type -> aichat.BulkProcessResponse
	21, // 69: aichat.AIChatService.ChatConversation:output_type -> aichat.AIResponse
	61, // [61:70] is the sub-list for method output_type
	52, // [52:61] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		EnumInfos:         file_chat_proto_enumTypes,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
