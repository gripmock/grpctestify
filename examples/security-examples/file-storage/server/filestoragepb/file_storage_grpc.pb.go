// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: file_storage.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileStorageService_UploadFiles_FullMethodName      = "/filestorage.FileStorageService/UploadFiles"
	FileStorageService_UploadSecureFile_FullMethodName = "/filestorage.FileStorageService/UploadSecureFile"
	FileStorageService_HealthCheck_FullMethodName      = "/filestorage.FileStorageService/HealthCheck"
)

// FileStorageServiceClient is the client API for FileStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStorageServiceClient interface {
	// Upload files with chunking (Client Streaming)
	UploadFiles(ctx context.Context, opts ...grpc.CallOption) (FileStorageService_UploadFilesClient, error)
	// Upload secure file with encryption (Unary)
	UploadSecureFile(ctx context.Context, in *SecureFile, opts ...grpc.CallOption) (FileStorageService_UploadSecureFileClient, error)
	// Health check
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type fileStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStorageServiceClient(cc grpc.ClientConnInterface) FileStorageServiceClient {
	return &fileStorageServiceClient{cc}
}

func (c *fileStorageServiceClient) UploadFiles(ctx context.Context, opts ...grpc.CallOption) (FileStorageService_UploadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStorageService_ServiceDesc.Streams[0], FileStorageService_UploadFiles_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStorageServiceUploadFilesClient{stream}
	return x, nil
}

type FileStorageService_UploadFilesClient interface {
	Send(*FileChunk) error
	Recv() (*UploadResponse, error)
	grpc.ClientStream
}

type fileStorageServiceUploadFilesClient struct {
	grpc.ClientStream
}

func (x *fileStorageServiceUploadFilesClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileStorageServiceUploadFilesClient) Recv() (*UploadResponse, error) {
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStorageServiceClient) UploadSecureFile(ctx context.Context, in *SecureFile, opts ...grpc.CallOption) (FileStorageService_UploadSecureFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileStorageService_ServiceDesc.Streams[1], FileStorageService_UploadSecureFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileStorageServiceUploadSecureFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileStorageService_UploadSecureFileClient interface {
	Recv() (*SecureUploadResponse, error)
	grpc.ClientStream
}

type fileStorageServiceUploadSecureFileClient struct {
	grpc.ClientStream
}

func (x *fileStorageServiceUploadSecureFileClient) Recv() (*SecureUploadResponse, error) {
	m := new(SecureUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileStorageServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, FileStorageService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStorageServiceServer is the server API for FileStorageService service.
// All implementations must embed UnimplementedFileStorageServiceServer
// for forward compatibility
type FileStorageServiceServer interface {
	// Upload files with chunking (Client Streaming)
	UploadFiles(FileStorageService_UploadFilesServer) error
	// Upload secure file with encryption (Unary)
	UploadSecureFile(*SecureFile, FileStorageService_UploadSecureFileServer) error
	// Health check
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	mustEmbedUnimplementedFileStorageServiceServer()
}

// UnimplementedFileStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileStorageServiceServer struct {
}

func (UnimplementedFileStorageServiceServer) UploadFiles(FileStorageService_UploadFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedFileStorageServiceServer) UploadSecureFile(*SecureFile, FileStorageService_UploadSecureFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSecureFile not implemented")
}
func (UnimplementedFileStorageServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFileStorageServiceServer) mustEmbedUnimplementedFileStorageServiceServer() {}

// UnsafeFileStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStorageServiceServer will
// result in compilation errors.
type UnsafeFileStorageServiceServer interface {
	mustEmbedUnimplementedFileStorageServiceServer()
}

func RegisterFileStorageServiceServer(s grpc.ServiceRegistrar, srv FileStorageServiceServer) {
	s.RegisterService(&FileStorageService_ServiceDesc, srv)
}

func _FileStorageService_UploadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileStorageServiceServer).UploadFiles(&fileStorageServiceUploadFilesServer{stream})
}

type FileStorageService_UploadFilesServer interface {
	Send(*UploadResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type fileStorageServiceUploadFilesServer struct {
	grpc.ServerStream
}

func (x *fileStorageServiceUploadFilesServer) Send(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileStorageServiceUploadFilesServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileStorageService_UploadSecureFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SecureFile)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileStorageServiceServer).UploadSecureFile(m, &fileStorageServiceUploadSecureFileServer{stream})
}

type FileStorageService_UploadSecureFileServer interface {
	Send(*SecureUploadResponse) error
	grpc.ServerStream
}

type fileStorageServiceUploadSecureFileServer struct {
	grpc.ServerStream
}

func (x *fileStorageServiceUploadSecureFileServer) Send(m *SecureUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileStorageService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStorageServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStorageService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStorageServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStorageService_ServiceDesc is the grpc.ServiceDesc for FileStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filestorage.FileStorageService",
	HandlerType: (*FileStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _FileStorageService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFiles",
			Handler:       _FileStorageService_UploadFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadSecureFile",
			Handler:       _FileStorageService_UploadSecureFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_storage.proto",
}
