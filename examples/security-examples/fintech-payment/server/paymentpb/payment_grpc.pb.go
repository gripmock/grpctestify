// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: payment.proto

package paymentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentService_CreateAccount_FullMethodName         = "/payment.PaymentService/CreateAccount"
	PaymentService_GetAccount_FullMethodName            = "/payment.PaymentService/GetAccount"
	PaymentService_ProcessPayment_FullMethodName        = "/payment.PaymentService/ProcessPayment"
	PaymentService_ProcessRefund_FullMethodName         = "/payment.PaymentService/ProcessRefund"
	PaymentService_GetTransactionHistory_FullMethodName = "/payment.PaymentService/GetTransactionHistory"
	PaymentService_ValidateCard_FullMethodName          = "/payment.PaymentService/ValidateCard"
	PaymentService_HealthCheck_FullMethodName           = "/payment.PaymentService/HealthCheck"
	PaymentService_StreamTransactions_FullMethodName    = "/payment.PaymentService/StreamTransactions"
	PaymentService_BulkProcessPayments_FullMethodName   = "/payment.PaymentService/BulkProcessPayments"
	PaymentService_FraudDetection_FullMethodName        = "/payment.PaymentService/FraudDetection"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// Unary RPCs
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	ValidateCard(ctx context.Context, in *ValidateCardRequest, opts ...grpc.CallOption) (*ValidateCardResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Server Streaming - Real-time transaction monitoring
	StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (PaymentService_StreamTransactionsClient, error)
	// Client Streaming - Bulk payment processing
	BulkProcessPayments(ctx context.Context, opts ...grpc.CallOption) (PaymentService_BulkProcessPaymentsClient, error)
	// Bidirectional Streaming - Real-time fraud detection and payment processing
	FraudDetection(ctx context.Context, opts ...grpc.CallOption) (PaymentService_FraudDetectionClient, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, PaymentService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_ProcessPayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error) {
	out := new(ProcessRefundResponse)
	err := c.cc.Invoke(ctx, PaymentService_ProcessRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetTransactionHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ValidateCard(ctx context.Context, in *ValidateCardRequest, opts ...grpc.CallOption) (*ValidateCardResponse, error) {
	out := new(ValidateCardResponse)
	err := c.cc.Invoke(ctx, PaymentService_ValidateCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, PaymentService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (PaymentService_StreamTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaymentService_ServiceDesc.Streams[0], PaymentService_StreamTransactions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentServiceStreamTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PaymentService_StreamTransactionsClient interface {
	Recv() (*TransactionUpdate, error)
	grpc.ClientStream
}

type paymentServiceStreamTransactionsClient struct {
	grpc.ClientStream
}

func (x *paymentServiceStreamTransactionsClient) Recv() (*TransactionUpdate, error) {
	m := new(TransactionUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *paymentServiceClient) BulkProcessPayments(ctx context.Context, opts ...grpc.CallOption) (PaymentService_BulkProcessPaymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaymentService_ServiceDesc.Streams[1], PaymentService_BulkProcessPayments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentServiceBulkProcessPaymentsClient{stream}
	return x, nil
}

type PaymentService_BulkProcessPaymentsClient interface {
	Send(*BulkPaymentRequest) error
	CloseAndRecv() (*BulkPaymentResponse, error)
	grpc.ClientStream
}

type paymentServiceBulkProcessPaymentsClient struct {
	grpc.ClientStream
}

func (x *paymentServiceBulkProcessPaymentsClient) Send(m *BulkPaymentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *paymentServiceBulkProcessPaymentsClient) CloseAndRecv() (*BulkPaymentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkPaymentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *paymentServiceClient) FraudDetection(ctx context.Context, opts ...grpc.CallOption) (PaymentService_FraudDetectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaymentService_ServiceDesc.Streams[2], PaymentService_FraudDetection_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentServiceFraudDetectionClient{stream}
	return x, nil
}

type PaymentService_FraudDetectionClient interface {
	Send(*PaymentRequest) error
	Recv() (*FraudAnalysis, error)
	grpc.ClientStream
}

type paymentServiceFraudDetectionClient struct {
	grpc.ClientStream
}

func (x *paymentServiceFraudDetectionClient) Send(m *PaymentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *paymentServiceFraudDetectionClient) Recv() (*FraudAnalysis, error) {
	m := new(FraudAnalysis)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	// Unary RPCs
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	ProcessRefund(context.Context, *ProcessRefundRequest) (*ProcessRefundResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	ValidateCard(context.Context, *ValidateCardRequest) (*ValidateCardResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Server Streaming - Real-time transaction monitoring
	StreamTransactions(*StreamTransactionsRequest, PaymentService_StreamTransactionsServer) error
	// Client Streaming - Bulk payment processing
	BulkProcessPayments(PaymentService_BulkProcessPaymentsServer) error
	// Bidirectional Streaming - Real-time fraud detection and payment processing
	FraudDetection(PaymentService_FraudDetectionServer) error
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedPaymentServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedPaymentServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedPaymentServiceServer) ProcessRefund(context.Context, *ProcessRefundRequest) (*ProcessRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRefund not implemented")
}
func (UnimplementedPaymentServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedPaymentServiceServer) ValidateCard(context.Context, *ValidateCardRequest) (*ValidateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCard not implemented")
}
func (UnimplementedPaymentServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPaymentServiceServer) StreamTransactions(*StreamTransactionsRequest, PaymentService_StreamTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTransactions not implemented")
}
func (UnimplementedPaymentServiceServer) BulkProcessPayments(PaymentService_BulkProcessPaymentsServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkProcessPayments not implemented")
}
func (UnimplementedPaymentServiceServer) FraudDetection(PaymentService_FraudDetectionServer) error {
	return status.Errorf(codes.Unimplemented, "method FraudDetection not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ProcessRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ProcessRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ProcessRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ProcessRefund(ctx, req.(*ProcessRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ValidateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ValidateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ValidateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ValidateCard(ctx, req.(*ValidateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_StreamTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaymentServiceServer).StreamTransactions(m, &paymentServiceStreamTransactionsServer{stream})
}

type PaymentService_StreamTransactionsServer interface {
	Send(*TransactionUpdate) error
	grpc.ServerStream
}

type paymentServiceStreamTransactionsServer struct {
	grpc.ServerStream
}

func (x *paymentServiceStreamTransactionsServer) Send(m *TransactionUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _PaymentService_BulkProcessPayments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PaymentServiceServer).BulkProcessPayments(&paymentServiceBulkProcessPaymentsServer{stream})
}

type PaymentService_BulkProcessPaymentsServer interface {
	SendAndClose(*BulkPaymentResponse) error
	Recv() (*BulkPaymentRequest, error)
	grpc.ServerStream
}

type paymentServiceBulkProcessPaymentsServer struct {
	grpc.ServerStream
}

func (x *paymentServiceBulkProcessPaymentsServer) SendAndClose(m *BulkPaymentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *paymentServiceBulkProcessPaymentsServer) Recv() (*BulkPaymentRequest, error) {
	m := new(BulkPaymentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PaymentService_FraudDetection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PaymentServiceServer).FraudDetection(&paymentServiceFraudDetectionServer{stream})
}

type PaymentService_FraudDetectionServer interface {
	Send(*FraudAnalysis) error
	Recv() (*PaymentRequest, error)
	grpc.ServerStream
}

type paymentServiceFraudDetectionServer struct {
	grpc.ServerStream
}

func (x *paymentServiceFraudDetectionServer) Send(m *FraudAnalysis) error {
	return x.ServerStream.SendMsg(m)
}

func (x *paymentServiceFraudDetectionServer) Recv() (*PaymentRequest, error) {
	m := new(PaymentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _PaymentService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _PaymentService_GetAccount_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _PaymentService_ProcessPayment_Handler,
		},
		{
			MethodName: "ProcessRefund",
			Handler:    _PaymentService_ProcessRefund_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _PaymentService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "ValidateCard",
			Handler:    _PaymentService_ValidateCard_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _PaymentService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTransactions",
			Handler:       _PaymentService_StreamTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkProcessPayments",
			Handler:       _PaymentService_BulkProcessPayments_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FraudDetection",
			Handler:       _PaymentService_FraudDetection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "payment.proto",
}
