syntax = "proto3";

package user;

option go_package = "github.com/gripmock/grpctestify/examples/user-management/server";

// User represents a user in the system
message User {
    string id = 1;
    string username = 2;
    string email = 3;
    string full_name = 4;
    int32 age = 5;
    bool active = 6;
    repeated string roles = 7;
    map<string, string> metadata = 8;
    string created_at = 9;
    string updated_at = 10;
}

// UserProfile represents a user's profile information
message UserProfile {
    string user_id = 1;
    string bio = 2;
    string avatar_url = 3;
    Address address = 4;
    repeated string interests = 5;
    map<string, string> preferences = 6;
}

// Address represents a user's address
message Address {
    string street = 1;
    string city = 2;
    string state = 3;
    string country = 4;
    string postal_code = 5;
}

// UserService provides user management functionality
service UserService {
    // User CRUD operations
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    
    // Authentication
    rpc AuthenticateUser(AuthenticateUserRequest) returns (AuthenticateUserResponse);
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
    
    // Profile management
    rpc GetUserProfile(GetUserProfileRequest) returns (GetUserProfileResponse);
    rpc UpdateUserProfile(UpdateUserProfileRequest) returns (UpdateUserProfileResponse);
    
    // Search and listing
    rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}

// Request/Response messages for user CRUD operations
message CreateUserRequest {
    string username = 1;
    string email = 2;
    string full_name = 3;
    int32 age = 4;
    repeated string roles = 5;
    map<string, string> metadata = 6;
}

message CreateUserResponse {
    User user = 1;
    string message = 2;
    bool success = 3;
}

message GetUserRequest {
    string user_id = 1;
    bool include_profile = 2;
}

message GetUserResponse {
    User user = 1;
    UserProfile profile = 2;
    bool found = 3;
}

message UpdateUserRequest {
    string user_id = 1;
    string username = 2;
    string email = 3;
    string full_name = 4;
    int32 age = 5;
    bool active = 6;
    repeated string roles = 7;
    map<string, string> metadata = 8;
}

message UpdateUserResponse {
    User user = 1;
    bool success = 2;
    string message = 3;
}

message DeleteUserRequest {
    string user_id = 1;
    bool soft_delete = 2;
}

message DeleteUserResponse {
    bool success = 1;
    string message = 2;
}

// Authentication messages
message AuthenticateUserRequest {
    string username = 1;
    string password = 2;
}

message AuthenticateUserResponse {
    bool success = 1;
    string token = 2;
    User user = 3;
    string expires_at = 4;
    repeated string permissions = 5;
    string error_message = 6;
}

message ValidateTokenRequest {
    string token = 1;
}

message ValidateTokenResponse {
    bool valid = 1;
    string user_id = 2;
    repeated string permissions = 3;
    string expires_at = 4;
    string error_message = 5;
}

// Profile management messages
message GetUserProfileRequest {
    string user_id = 1;
}

message GetUserProfileResponse {
    UserProfile profile = 1;
    bool found = 2;
}

message UpdateUserProfileRequest {
    string user_id = 1;
    string bio = 2;
    string avatar_url = 3;
    Address address = 4;
    repeated string interests = 5;
    map<string, string> preferences = 6;
}

message UpdateUserProfileResponse {
    UserProfile profile = 1;
    bool success = 2;
}

// Search and listing messages
message SearchUsersRequest {
    string query = 1;
    repeated string roles = 2;
    bool active_only = 3;
    int32 page = 4;
    int32 page_size = 5;
}

message SearchUsersResponse {
    repeated User users = 1;
    int32 total_count = 2;
    int32 page = 3;
    int32 page_size = 4;
    bool has_more = 5;
}

message ListUsersRequest {
    int32 page = 1;
    int32 page_size = 2;
    string sort_by = 3;
    bool ascending = 4;
}

message ListUsersResponse {
    repeated User users = 1;
    int32 total_count = 2;
    int32 page = 3;
    int32 page_size = 4;
    bool has_more = 5;
}

