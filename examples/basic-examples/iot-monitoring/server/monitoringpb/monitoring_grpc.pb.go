// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: monitoring.proto

package monitoringpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IoTMonitoringService_RegisterDevice_FullMethodName     = "/monitoring.IoTMonitoringService/RegisterDevice"
	IoTMonitoringService_GetDevice_FullMethodName          = "/monitoring.IoTMonitoringService/GetDevice"
	IoTMonitoringService_UpdateDeviceStatus_FullMethodName = "/monitoring.IoTMonitoringService/UpdateDeviceStatus"
	IoTMonitoringService_GetDeviceMetrics_FullMethodName   = "/monitoring.IoTMonitoringService/GetDeviceMetrics"
	IoTMonitoringService_HealthCheck_FullMethodName        = "/monitoring.IoTMonitoringService/HealthCheck"
	IoTMonitoringService_StreamDeviceStatus_FullMethodName = "/monitoring.IoTMonitoringService/StreamDeviceStatus"
	IoTMonitoringService_BulkUpdateDevices_FullMethodName  = "/monitoring.IoTMonitoringService/BulkUpdateDevices"
	IoTMonitoringService_MonitorDevices_FullMethodName     = "/monitoring.IoTMonitoringService/MonitorDevices"
)

// IoTMonitoringServiceClient is the client API for IoTMonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IoTMonitoringServiceClient interface {
	// Unary RPCs
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	UpdateDeviceStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*UpdateDeviceStatusResponse, error)
	GetDeviceMetrics(ctx context.Context, in *GetDeviceMetricsRequest, opts ...grpc.CallOption) (*GetDeviceMetricsResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Server Streaming - Real-time device status updates
	StreamDeviceStatus(ctx context.Context, in *StreamDeviceStatusRequest, opts ...grpc.CallOption) (IoTMonitoringService_StreamDeviceStatusClient, error)
	// Client Streaming - Bulk device configuration updates
	BulkUpdateDevices(ctx context.Context, opts ...grpc.CallOption) (IoTMonitoringService_BulkUpdateDevicesClient, error)
	// Bidirectional Streaming - Real-time device monitoring and control
	MonitorDevices(ctx context.Context, opts ...grpc.CallOption) (IoTMonitoringService_MonitorDevicesClient, error)
}

type ioTMonitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIoTMonitoringServiceClient(cc grpc.ClientConnInterface) IoTMonitoringServiceClient {
	return &ioTMonitoringServiceClient{cc}
}

func (c *ioTMonitoringServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, IoTMonitoringService_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTMonitoringServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, IoTMonitoringService_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTMonitoringServiceClient) UpdateDeviceStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*UpdateDeviceStatusResponse, error) {
	out := new(UpdateDeviceStatusResponse)
	err := c.cc.Invoke(ctx, IoTMonitoringService_UpdateDeviceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTMonitoringServiceClient) GetDeviceMetrics(ctx context.Context, in *GetDeviceMetricsRequest, opts ...grpc.CallOption) (*GetDeviceMetricsResponse, error) {
	out := new(GetDeviceMetricsResponse)
	err := c.cc.Invoke(ctx, IoTMonitoringService_GetDeviceMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTMonitoringServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, IoTMonitoringService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioTMonitoringServiceClient) StreamDeviceStatus(ctx context.Context, in *StreamDeviceStatusRequest, opts ...grpc.CallOption) (IoTMonitoringService_StreamDeviceStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &IoTMonitoringService_ServiceDesc.Streams[0], IoTMonitoringService_StreamDeviceStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ioTMonitoringServiceStreamDeviceStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IoTMonitoringService_StreamDeviceStatusClient interface {
	Recv() (*DeviceStatusUpdate, error)
	grpc.ClientStream
}

type ioTMonitoringServiceStreamDeviceStatusClient struct {
	grpc.ClientStream
}

func (x *ioTMonitoringServiceStreamDeviceStatusClient) Recv() (*DeviceStatusUpdate, error) {
	m := new(DeviceStatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ioTMonitoringServiceClient) BulkUpdateDevices(ctx context.Context, opts ...grpc.CallOption) (IoTMonitoringService_BulkUpdateDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IoTMonitoringService_ServiceDesc.Streams[1], IoTMonitoringService_BulkUpdateDevices_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ioTMonitoringServiceBulkUpdateDevicesClient{stream}
	return x, nil
}

type IoTMonitoringService_BulkUpdateDevicesClient interface {
	Send(*BulkUpdateDeviceRequest) error
	CloseAndRecv() (*BulkUpdateDevicesResponse, error)
	grpc.ClientStream
}

type ioTMonitoringServiceBulkUpdateDevicesClient struct {
	grpc.ClientStream
}

func (x *ioTMonitoringServiceBulkUpdateDevicesClient) Send(m *BulkUpdateDeviceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ioTMonitoringServiceBulkUpdateDevicesClient) CloseAndRecv() (*BulkUpdateDevicesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BulkUpdateDevicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ioTMonitoringServiceClient) MonitorDevices(ctx context.Context, opts ...grpc.CallOption) (IoTMonitoringService_MonitorDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IoTMonitoringService_ServiceDesc.Streams[2], IoTMonitoringService_MonitorDevices_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ioTMonitoringServiceMonitorDevicesClient{stream}
	return x, nil
}

type IoTMonitoringService_MonitorDevicesClient interface {
	Send(*DeviceCommand) error
	Recv() (*DeviceTelemetry, error)
	grpc.ClientStream
}

type ioTMonitoringServiceMonitorDevicesClient struct {
	grpc.ClientStream
}

func (x *ioTMonitoringServiceMonitorDevicesClient) Send(m *DeviceCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ioTMonitoringServiceMonitorDevicesClient) Recv() (*DeviceTelemetry, error) {
	m := new(DeviceTelemetry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IoTMonitoringServiceServer is the server API for IoTMonitoringService service.
// All implementations must embed UnimplementedIoTMonitoringServiceServer
// for forward compatibility
type IoTMonitoringServiceServer interface {
	// Unary RPCs
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	UpdateDeviceStatus(context.Context, *UpdateDeviceStatusRequest) (*UpdateDeviceStatusResponse, error)
	GetDeviceMetrics(context.Context, *GetDeviceMetricsRequest) (*GetDeviceMetricsResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Server Streaming - Real-time device status updates
	StreamDeviceStatus(*StreamDeviceStatusRequest, IoTMonitoringService_StreamDeviceStatusServer) error
	// Client Streaming - Bulk device configuration updates
	BulkUpdateDevices(IoTMonitoringService_BulkUpdateDevicesServer) error
	// Bidirectional Streaming - Real-time device monitoring and control
	MonitorDevices(IoTMonitoringService_MonitorDevicesServer) error
	mustEmbedUnimplementedIoTMonitoringServiceServer()
}

// UnimplementedIoTMonitoringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIoTMonitoringServiceServer struct {
}

func (UnimplementedIoTMonitoringServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) UpdateDeviceStatus(context.Context, *UpdateDeviceStatusRequest) (*UpdateDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceStatus not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) GetDeviceMetrics(context.Context, *GetDeviceMetricsRequest) (*GetDeviceMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMetrics not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) StreamDeviceStatus(*StreamDeviceStatusRequest, IoTMonitoringService_StreamDeviceStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceStatus not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) BulkUpdateDevices(IoTMonitoringService_BulkUpdateDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkUpdateDevices not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) MonitorDevices(IoTMonitoringService_MonitorDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method MonitorDevices not implemented")
}
func (UnimplementedIoTMonitoringServiceServer) mustEmbedUnimplementedIoTMonitoringServiceServer() {}

// UnsafeIoTMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IoTMonitoringServiceServer will
// result in compilation errors.
type UnsafeIoTMonitoringServiceServer interface {
	mustEmbedUnimplementedIoTMonitoringServiceServer()
}

func RegisterIoTMonitoringServiceServer(s grpc.ServiceRegistrar, srv IoTMonitoringServiceServer) {
	s.RegisterService(&IoTMonitoringService_ServiceDesc, srv)
}

func _IoTMonitoringService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTMonitoringServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTMonitoringService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTMonitoringServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTMonitoringService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTMonitoringServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTMonitoringService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTMonitoringServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTMonitoringService_UpdateDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTMonitoringServiceServer).UpdateDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTMonitoringService_UpdateDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTMonitoringServiceServer).UpdateDeviceStatus(ctx, req.(*UpdateDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTMonitoringService_GetDeviceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTMonitoringServiceServer).GetDeviceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTMonitoringService_GetDeviceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTMonitoringServiceServer).GetDeviceMetrics(ctx, req.(*GetDeviceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTMonitoringService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoTMonitoringServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IoTMonitoringService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoTMonitoringServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoTMonitoringService_StreamDeviceStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDeviceStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IoTMonitoringServiceServer).StreamDeviceStatus(m, &ioTMonitoringServiceStreamDeviceStatusServer{stream})
}

type IoTMonitoringService_StreamDeviceStatusServer interface {
	Send(*DeviceStatusUpdate) error
	grpc.ServerStream
}

type ioTMonitoringServiceStreamDeviceStatusServer struct {
	grpc.ServerStream
}

func (x *ioTMonitoringServiceStreamDeviceStatusServer) Send(m *DeviceStatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _IoTMonitoringService_BulkUpdateDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IoTMonitoringServiceServer).BulkUpdateDevices(&ioTMonitoringServiceBulkUpdateDevicesServer{stream})
}

type IoTMonitoringService_BulkUpdateDevicesServer interface {
	SendAndClose(*BulkUpdateDevicesResponse) error
	Recv() (*BulkUpdateDeviceRequest, error)
	grpc.ServerStream
}

type ioTMonitoringServiceBulkUpdateDevicesServer struct {
	grpc.ServerStream
}

func (x *ioTMonitoringServiceBulkUpdateDevicesServer) SendAndClose(m *BulkUpdateDevicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ioTMonitoringServiceBulkUpdateDevicesServer) Recv() (*BulkUpdateDeviceRequest, error) {
	m := new(BulkUpdateDeviceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IoTMonitoringService_MonitorDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IoTMonitoringServiceServer).MonitorDevices(&ioTMonitoringServiceMonitorDevicesServer{stream})
}

type IoTMonitoringService_MonitorDevicesServer interface {
	Send(*DeviceTelemetry) error
	Recv() (*DeviceCommand, error)
	grpc.ServerStream
}

type ioTMonitoringServiceMonitorDevicesServer struct {
	grpc.ServerStream
}

func (x *ioTMonitoringServiceMonitorDevicesServer) Send(m *DeviceTelemetry) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ioTMonitoringServiceMonitorDevicesServer) Recv() (*DeviceCommand, error) {
	m := new(DeviceCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IoTMonitoringService_ServiceDesc is the grpc.ServiceDesc for IoTMonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IoTMonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.IoTMonitoringService",
	HandlerType: (*IoTMonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDevice",
			Handler:    _IoTMonitoringService_RegisterDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _IoTMonitoringService_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDeviceStatus",
			Handler:    _IoTMonitoringService_UpdateDeviceStatus_Handler,
		},
		{
			MethodName: "GetDeviceMetrics",
			Handler:    _IoTMonitoringService_GetDeviceMetrics_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _IoTMonitoringService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDeviceStatus",
			Handler:       _IoTMonitoringService_StreamDeviceStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkUpdateDevices",
			Handler:       _IoTMonitoringService_BulkUpdateDevices_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MonitorDevices",
			Handler:       _IoTMonitoringService_MonitorDevices_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "monitoring.proto",
}
