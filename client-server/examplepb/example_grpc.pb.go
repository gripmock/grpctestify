// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.3
// source: example.proto

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExampleService_ClientStream_FullMethodName = "/example.ExampleService/ClientStream"
	ExampleService_ServerStream_FullMethodName = "/example.ExampleService/ServerStream"
	ExampleService_BidiStream_FullMethodName   = "/example.ExampleService/BidiStream"
)

// ExampleServiceClient is the client API for ExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleServiceClient interface {
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (ExampleService_ServerStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_BidiStreamClient, error)
}

type exampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleServiceClient(cc grpc.ClientConnInterface) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_ClientStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[0], ExampleService_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceClientStreamClient{ClientStream: stream}
	return x, nil
}

type ExampleService_ClientStreamClient interface {
	Send(*Message) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type exampleServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *exampleServiceClientStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceClientStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleServiceClient) ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (ExampleService_ServerStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[1], ExampleService_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceServerStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExampleService_ServerStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type exampleServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *exampleServiceServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleServiceClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (ExampleService_BidiStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ExampleService_ServiceDesc.Streams[2], ExampleService_BidiStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceBidiStreamClient{ClientStream: stream}
	return x, nil
}

type ExampleService_BidiStreamClient interface {
	Send(*Message) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type exampleServiceBidiStreamClient struct {
	grpc.ClientStream
}

func (x *exampleServiceBidiStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceBidiStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServiceServer is the server API for ExampleService service.
// All implementations must embed UnimplementedExampleServiceServer
// for forward compatibility
type ExampleServiceServer interface {
	ClientStream(ExampleService_ClientStreamServer) error
	ServerStream(*Message, ExampleService_ServerStreamServer) error
	BidiStream(ExampleService_BidiStreamServer) error
	mustEmbedUnimplementedExampleServiceServer()
}

// UnimplementedExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServiceServer struct {
}

func (UnimplementedExampleServiceServer) ClientStream(ExampleService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedExampleServiceServer) ServerStream(*Message, ExampleService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedExampleServiceServer) BidiStream(ExampleService_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedExampleServiceServer) mustEmbedUnimplementedExampleServiceServer() {}

// UnsafeExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServiceServer will
// result in compilation errors.
type UnsafeExampleServiceServer interface {
	mustEmbedUnimplementedExampleServiceServer()
}

func RegisterExampleServiceServer(s grpc.ServiceRegistrar, srv ExampleServiceServer) {
	s.RegisterService(&ExampleService_ServiceDesc, srv)
}

func _ExampleService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).ClientStream(&exampleServiceClientStreamServer{ServerStream: stream})
}

type ExampleService_ClientStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type exampleServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *exampleServiceClientStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceClientStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExampleService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServiceServer).ServerStream(m, &exampleServiceServerStreamServer{ServerStream: stream})
}

type ExampleService_ServerStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type exampleServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *exampleServiceServerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ExampleService_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).BidiStream(&exampleServiceBidiStreamServer{ServerStream: stream})
}

type ExampleService_BidiStreamServer interface {
	Send(*Response) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type exampleServiceBidiStreamServer struct {
	grpc.ServerStream
}

func (x *exampleServiceBidiStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceBidiStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleService_ServiceDesc is the grpc.ServiceDesc for ExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _ExampleService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _ExampleService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _ExampleService_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}
